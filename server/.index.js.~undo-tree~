(undo-tree-save-format-version . 1)
"b136b0efb5232a7f230a0d48a316944b59744898"
[nil nil nil nil (26125 33290 939727 833000) 0 nil]
([nil nil ((1 . 22) (t 26125 33199 411417 295000)) nil (26125 33290 939720 74000) 0 nil])
([nil nil ((22 . 32)) nil (26125 33290 939713 55000) 0 nil])
([nil nil ((32 . 37)) nil (26125 33290 939706 796000) 0 nil])
([nil nil ((37 . 38)) nil (26125 33290 939700 407000) 0 nil])
([nil nil ((38 . 58)) nil (26125 33290 939694 500000) 0 nil])
([nil nil ((58 . 60)) nil (26125 33290 939688 74000) 0 nil])
([nil nil ((60 . 71)) nil (26125 33290 939681 889000) 0 nil])
([nil nil ((59 . 61)) nil (26125 33290 939675 796000) 0 nil])
([nil nil ((60 . 69)) nil (26125 33290 939669 185000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-variable-name-face ws-butler-chg chg fontified t)) . -66) (undo-tree-id15 . -1) (#("e" 0 1 (face font-lock-variable-name-face ws-butler-chg chg fontified t)) . -67) (undo-tree-id16 . -1) (#("r" 0 1 (face font-lock-variable-name-face ws-butler-chg chg fontified t)) . -68) (undo-tree-id17 . -1) 69) nil (26125 33290 939660 611000) 0 nil])
([nil nil ((66 . 73)) nil (26125 33290 939641 204000) 0 nil])
([nil nil ((#("=" 0 1 (ws-butler-chg chg fontified t)) . -72) (undo-tree-id14 . -1) 73) nil (26125 33290 939634 148000) 0 nil])
([nil nil ((72 . 73)) nil (26125 33290 939623 56000) 0 nil])
([nil nil ((73 . 78)) nil (26125 33290 939616 945000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -77) (undo-tree-id13 . -1) 78) nil (26125 33290 939609 778000) 0 nil])
([nil nil ((77 . 84)) nil (26125 33290 939598 667000) 0 nil])
([nil nil ((#("6" 0 1 (ws-butler-chg chg fontified t)) . -83) (undo-tree-id12 . -1) 84) nil (26125 33290 939591 445000) 0 nil])
([nil nil ((83 . 85)) nil (26125 33290 939580 371000) 0 nil])
([nil nil ((98 . 109)) nil (26125 33290 939574 278000) 0 nil])
([nil nil ((109 . 119)) nil (26125 33290 939568 56000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil ws-butler-chg chg)) . 119) (119 . 123) (118 . 120)) nil (26125 33290 939560 871000) 0 nil])
([nil nil ((119 . 123) (119 . 131)) nil (26125 33290 939552 667000) 0 nil])
([nil nil ((135 . 156)) nil (26125 33290 939545 334000) 0 nil])
([nil nil ((156 . 162)) nil (26125 33290 939538 852000) 0 nil])
([nil nil ((162 . 163)) nil (26125 33290 939532 1000) 0 nil])
([nil nil ((#("," 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -161) (undo-tree-id10 . -1) (#("
" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -162) (undo-tree-id11 . -1) 163) nil (26125 33290 939523 741000) 0 nil])
([nil nil ((161 . 170)) nil (26125 33290 939507 556000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t ws-butler-chg chg)) . -167) (undo-tree-id7 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -168) (undo-tree-id8 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -169) (undo-tree-id9 . -1) 170) nil (26125 33290 939498 315000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -161) (undo-tree-id1 . -1) (#("," 0 1 (fontified t ws-butler-chg chg)) . -162) (undo-tree-id2 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -163) (undo-tree-id3 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -164) (undo-tree-id4 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -165) (undo-tree-id5 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -166) (undo-tree-id6 . -1) 167) nil (26125 33290 939472 982000) 0 nil])
([nil nil ((161 . 162)) nil (26125 33290 939437 242000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -161) (undo-tree-id0 . -1) 162) nil (26125 33290 939427 779000) 0 nil])
([nil nil ((161 . 179)) nil (26125 33290 939366 946000) 0 nil])
([nil nil ((181 . 182) 179) nil (26125 33290 939350 446000) 0 nil])
([nil nil ((57 . 59) (t 26125 33290 951093 700000)) nil (26125 33317 43580 275000) 0 nil])
([nil nil ((183 . 184) (t 26125 33317 54999 178000)) nil (26125 33340 642770 136000) 0 nil])
([nil nil ((184 . 186) (t 26125 33340 650912 958000)) nil (26125 33465 385804 301000) 0 nil])
([nil nil ((186 . 187)) nil (26125 33465 385796 820000) 0 nil])
([nil nil ((#("s" 0 1 (ws-butler-chg chg fontified t)) . -186) (undo-tree-id29 . -1) 187) nil (26125 33465 385789 283000) 0 nil])
([nil nil ((186 . 194)) nil (26125 33465 385777 653000) 0 nil])
([nil nil ((#("r" 0 1 (ws-butler-chg chg fontified t)) . -192) (undo-tree-id27 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t)) . -193) (undo-tree-id28 . -1) 194) nil (26125 33465 385768 746000) 0 nil])
([nil nil ((192 . 195)) nil (26125 33465 385752 505000) 0 nil])
([nil nil ((195 . 203)) nil (26125 33465 385745 820000) 0 nil])
([nil nil ((203 . 211)) nil (26125 33465 385739 487000) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -207) (undo-tree-id23 . -1) (#("r" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -208) (undo-tree-id24 . -1) (#("e" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -209) (undo-tree-id25 . -1) (#("s" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -210) (undo-tree-id26 . -1) 211) nil (26125 33465 385729 690000) 0 nil])
([nil nil ((207 . 214)) nil (26125 33465 385706 690000) 0 nil])
([nil nil ((214 . 221)) nil (26125 33465 385700 542000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified nil)) . 221) (221 . 225) (220 . 222)) nil (26125 33465 385693 431000) 0 nil])
([nil nil ((221 . 223)) nil (26125 33465 385684 950000) 0 nil])
([nil nil ((#("r" 0 1 (ws-butler-chg chg fontified t)) . -221) (undo-tree-id21 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t)) . -222) (undo-tree-id22 . -1) 223) nil (26125 33465 385676 5000) 0 nil])
([nil nil ((201 . 202)) nil (26125 33465 385659 857000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -214) (undo-tree-id20 . -1) 215) nil (26125 33465 385652 746000) 0 nil])
([nil nil ((221 . 225)) nil (26125 33465 385641 283000) 0 nil])
([nil nil ((225 . 246)) nil (26125 33465 385634 783000) 0 nil])
([nil nil ((246 . 254)) nil (26125 33465 385628 209000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -252) (undo-tree-id18 . -1) (#("=" 0 1 (ws-butler-chg chg fontified t)) . -253) (undo-tree-id19 . -1) 254) nil (26125 33465 385618 506000) 0 nil])
([nil nil ((252 . 253)) nil (26125 33465 385578 265000) 0 nil])
([nil nil ((253 . 258)) nil (26125 33465 385571 191000) 0 nil])
([nil nil ((258 . 266)) nil (26125 33465 385563 839000) 0 nil])
([nil nil ((266 . 282)) nil (26125 33465 385546 784000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 214) (t 26125 33465 394446 120000)) nil (26125 33721 97759 848000) 0 nil])
([nil nil ((283 . 284) (t 26125 33721 109444 190000)) nil (26125 33724 578548 516000) 0 nil])
([nil nil ((82 . 94) (t 26125 33724 589430 232000)) nil (26125 34301 672022 354000) 0 nil])
([nil nil ((94 . 109)) nil (26125 34301 672015 95000) 0 nil])
([nil nil ((#("app.listen(server_port, () => {
    console.log('server listenting on port: ', server_port);
})
" 0 32 (fontified t) 32 36 (fontified t) 36 48 (fontified t) 48 77 (face font-lock-string-face fontified t) 77 92 (fontified t) 92 93 (fontified t) 93 94 (fontified t) 94 95 (fontified t) 95 96 (fontified t)) . 116) (undo-tree-id30 . -96) (undo-tree-id31 . -96) (undo-tree-id32 . -96) (undo-tree-id33 . -96) 212) nil (26125 34301 672005 836000) 0 nil])
([nil nil ((216 . 218)) nil (26125 34301 671957 151000) 0 nil])
([nil nil ((nil rear-nonsticky nil 313 . 314) (nil fontified nil 313 . 314) (nil fontified nil 312 . 313) (nil fontified nil 311 . 312) (nil fontified nil 310 . 311) (nil fontified nil 295 . 310) (nil fontified nil 266 . 295) (nil fontified nil 254 . 266) (nil fontified nil 250 . 254) (nil fontified nil 218 . 250) (218 . 314)) nil (26125 34301 671936 855000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . -248) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("
" 0 1 (fontified t)) . -249) (undo-tree-id51 . -1) (undo-tree-id52 . -1) 250 (t 26125 34301 679044 121000)) nil (26125 34318 734599 186000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -308) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("}" 0 1 (fontified t)) . -309) (undo-tree-id47 . -1) 310) nil (26125 34318 734569 872000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg delete fontified t)) . -248) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#(" " 0 1 (fontified t)) . -249) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#(" " 0 1 (fontified t)) . -250) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#(" " 0 1 (fontified t)) . -251) (undo-tree-id42 . -1) 252) nil (26125 34318 734531 705000) 0 nil])
([nil nil ((217 . 224) (t 26125 34318 746972 79000)) nil (26125 34375 297962 186000) 0 nil])
([nil nil ((#("e" 0 1 (ws-butler-chg chg fontified t)) . -223) (undo-tree-id56 . -1) 224) nil (26125 34375 297953 464000) 0 nil])
([nil nil ((61 . 72)) nil (26125 34375 297941 464000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-variable-name-face ws-butler-chg chg fontified nil)) . -71) 72) nil (26125 34375 297934 464000) 0 nil])
([nil nil ((71 . 74)) nil (26125 34375 297926 631000) 0 nil])
([nil nil ((74 . 89)) nil (26125 34375 297919 668000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -86) (undo-tree-id53 . -1) (#("s" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -87) (undo-tree-id54 . -1) (#("'" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -88) (undo-tree-id55 . -1) 89) nil (26125 34375 297908 760000) 0 nil])
([nil nil ((86 . 90)) nil (26125 34375 297861 853000) 0 nil])
([nil nil ((252 . 262)) nil (26125 34375 297843 446000) 0 nil])
([nil nil ((262 . 263) (t 26125 34375 306732 964000)) nil (26125 34421 579929 564000) 0 nil])
([nil nil ((#("n" 0 1 (ws-butler-chg chg fontified t)) . -262) (undo-tree-id59 . -1) 263) nil (26125 34421 579920 230000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -348) (undo-tree-id58 . -1) 349) nil (26125 34421 579906 582000) 0 nil])
([nil nil ((349 . 350)) nil (26125 34421 579894 8000) 0 nil])
([nil nil ((#("l" 0 1 (ws-butler-chg chg fontified t)) . -349) (undo-tree-id57 . -1) 350) nil (26125 34421 579884 286000) 0 nil])
([nil nil ((349 . 350)) nil (26125 34629 657946 10000) 0 nil])
([nil nil ((#("app.use(cors());" 0 16 (fontified t)) . 246) (undo-tree-id62 . -16) (undo-tree-id63 . -16) (undo-tree-id64 . -16) (undo-tree-id65 . -16) 262) nil (26125 34635 230332 439000) 0 nil] [nil nil ((#("app.use(cors());" 0 16 (fontified t)) . -246) (undo-tree-id60 . -16) (undo-tree-id61 . -16) 262 (t 26125 34421 590536 889000)) ((246 . 262) (t 26125 34547 981999 858000)) (26125 34547 969643 911000) 0 nil])
([nil nil ((144 . 145)) nil (26125 34635 230283 180000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 160 . 161) (nil fontified nil 145 . 161) (145 . 161)) nil (26125 34635 230265 254000) 0 nil])
([nil nil ((162 . 164) (t 26125 34635 237627 963000)) nil (26125 34819 461619 410000) 0 nil])
([nil nil ((164 . 174)) nil (26125 34819 461611 947000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -173) (undo-tree-id74 . -1) 174) nil (26125 34819 461604 392000) 0 nil])
([nil nil ((173 . 174)) nil (26125 34819 461592 948000) 0 nil])
([nil nil ((174 . 178)) nil (26125 34819 461586 466000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -175) (undo-tree-id71 . -1) (#("t" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -176) (undo-tree-id72 . -1) (#("e" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -177) (undo-tree-id73 . -1) 178) nil (26125 34819 461577 207000) 0 nil])
([nil nil ((175 . 191)) nil (26125 34819 461556 800000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg chg fontified t)) . -190) (undo-tree-id70 . -1) 191) nil (26125 34819 461549 96000) 0 nil])
([nil nil ((190 . 191)) nil (26125 34819 461537 318000) 0 nil])
([nil nil ((191 . 197)) nil (26125 34819 461531 3000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified nil)) . 197) (197 . 201) (196 . 198)) nil (26125 34819 461522 874000) 0 nil])
([nil nil ((199 . 200)) nil (26125 34819 461515 152000) 0 nil])
([nil nil ((197 . 201)) nil (26125 34819 461508 837000) 0 nil])
([nil nil ((201 . 210)) nil (26125 34819 461502 374000) 0 nil])
([nil nil ((210 . 213)) nil (26125 34819 461496 374000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -211) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("r" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -212) (undo-tree-id68 . -1) (undo-tree-id69 . -1) 213) nil (26125 34819 461486 633000) 0 nil])
([nil nil ((211 . 224)) nil (26125 34819 461438 559000) 0 nil])
([nil nil ((224 . 225)) nil (26125 34819 461420 337000) 0 nil])
([nil nil ((228 . 229) (t 26125 34819 480840 310000)) nil (26125 34833 615661 290000) 0 nil])
([nil nil ((267 . 268)) nil (26125 34833 615653 494000) 0 nil])
([nil nil ((#("p" 0 1 (ws-butler-chg chg fontified t)) . -267) (undo-tree-id77 . -1) 268) nil (26125 34833 615645 697000) 0 nil])
([nil nil ((267 . 268)) nil (26125 34833 615633 864000) 0 nil])
([nil nil ((#("p" 0 1 (ws-butler-chg chg fontified t)) . -267) (undo-tree-id76 . -1) 268) nil (26125 34833 615625 957000) 0 nil])
([nil nil ((#("l" 0 1 (ws-butler-chg chg fontified t)) . -228) (undo-tree-id75 . -1) 229) nil (26125 34833 615610 438000) 0 nil])
([nil nil ((228 . 229)) nil (26125 34833 615575 512000) 0 nil])
([nil nil ((328 . 329)) nil (26125 34833 615557 253000) 0 nil])
([nil nil ((294 . 299) (t 26125 34833 628779 715000)) nil (26125 35165 661343 500000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -291) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("e" 0 1 (fontified t)) . -292) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("q" 0 1 (fontified t)) . -293) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("." 0 1 (fontified t)) . -294) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("b" 0 1 (fontified t)) . -295) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("o" 0 1 (fontified t)) . -296) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("d" 0 1 (fontified t)) . -297) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("y" 0 1 (fontified t)) . -298) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) 299 (t 26125 35165 679339 584000)) nil (26125 35364 210009 853000) 0 nil])
([nil nil ((291 . 299)) nil (26125 35364 209839 946000) 0 nil])
([nil nil ((#("w" 0 1 (ws-butler-chg chg fontified t)) . -298) (undo-tree-id78 . -1) (undo-tree-id79 . -1) 299) nil (26125 35364 209830 354000) 0 nil])
([nil nil ((298 . 299)) nil (26125 35364 209778 317000) 0 nil])
([nil nil ((299 . 300) (t 26125 35364 222435 278000)) nil (26125 35376 712065 210000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg chg fontified t)) . -299) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) 300) nil (26125 35376 712054 191000) 0 nil])
([nil nil ((299 . 300)) nil (26125 35376 711991 266000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -291) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("e" 0 1 (fontified t)) . -292) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("y" 0 1 (fontified t)) . -293) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("s" 0 1 (fontified t)) . -294) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("(" 0 1 (fontified t)) . -295) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("r" 0 1 (fontified t)) . -296) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (#("e" 0 1 (fontified t)) . -297) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("q" 0 1 (fontified t)) . -298) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#(")" 0 1 (fontified t)) . -299) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) 300 (t 26125 35376 718378 848000)) nil (26125 35409 748531 163000) 0 nil])
([nil nil ((291 . 301)) nil (26125 35409 748326 720000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -291) (undo-tree-id138 . -1) (#("e" 0 1 (fontified t)) . -292) (undo-tree-id139 . -1) (#("q" 0 1 (fontified t)) . -293) (undo-tree-id140 . -1) (#("." 0 1 (fontified t)) . -294) (undo-tree-id141 . -1) (#("k" 0 1 (fontified t)) . -295) (undo-tree-id142 . -1) (#("e" 0 1 (fontified t)) . -296) (undo-tree-id143 . -1) (#("y" 0 1 (fontified t)) . -297) (undo-tree-id144 . -1) (#("s" 0 1 (fontified t)) . -298) (undo-tree-id145 . -1) (#("(" 0 1 (fontified t)) . -299) (undo-tree-id146 . -1) 300 (t 26125 35409 758229 879000)) nil (26125 35569 855633 440000) 0 nil])
([nil nil ((#(")" 0 1 (ws-butler-chg delete fontified t)) . 291) (undo-tree-id136 . -1) (undo-tree-id137 . -1)) nil (26125 35569 855584 255000) 0 nil])
([nil nil ((291 . 299)) nil (26125 35569 855532 236000) 0 nil])
([nil nil ((162 . 168) (t 26125 35569 865512 229000)) nil (26125 35786 357853 745000) 0 nil])
([nil nil ((#("s" 0 1 (ws-butler-chg chg fontified nil)) . -166) (undo-tree-id149 . -1) (#("u" 0 1 (ws-butler-chg chg fontified t)) . -167) (undo-tree-id150 . -1) 168) nil (26125 35786 357844 578000) 0 nil])
([nil nil ((166 . 176)) nil (26125 35786 357828 875000) 0 nil])
([nil nil ((#("e" 0 1 (ws-butler-chg chg fontified t)) . -175) (undo-tree-id147 . -1) (undo-tree-id148 . -1) 176) nil (26125 35786 357819 745000) 0 nil])
([nil nil ((175 . 185)) nil (26125 35786 357779 245000) 0 nil])
([nil nil ((185 . 186)) nil (26125 35786 357762 579000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -318) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#("b" 0 1 (fontified t)) . -319) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (#("o" 0 1 (fontified t)) . -320) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("d" 0 1 (fontified t)) . -321) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#("y" 0 1 (fontified t)) . -322) (undo-tree-id163 . -1) 323 (t 26125 35786 372550 402000)) nil (26125 35848 466235 588000) 0 nil])
([nil nil ((318 . 323) (t 26125 35848 480275 859000)) nil (26125 36282 934427 536000) 0 nil])
([nil nil ((323 . 332) (t 26125 36282 946366 224000)) nil (26125 36666 911578 0) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -324) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("i" 0 1 (fontified t)) . -325) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("s" 0 1 (fontified t)) . -326) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("a" 0 1 (fontified t)) . -327) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("s" 0 1 (fontified t)) . -328) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("t" 0 1 (fontified t)) . -329) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("e" 0 1 (fontified t)) . -330) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("r" 0 1 (fontified t)) . -331) (undo-tree-id178 . -1) (undo-tree-id179 . -1) 332 (t 26125 36666 928687 704000)) nil (26125 36693 566102 829000) 0 nil])
([nil nil ((324 . 328)) nil (26125 36693 565984 274000) 0 nil])
([nil nil ((287 . 292) (t 26125 36693 580571 377000)) nil (26125 36881 134323 432000) 0 nil])
([nil nil ((292 . 294)) nil (26125 36881 134316 284000) 0 nil])
([nil nil ((#("c" 0 1 (ws-butler-chg chg fontified t)) . -292) (undo-tree-id204 . -1) (#("a" 0 1 (ws-butler-chg chg fontified t)) . -293) (undo-tree-id205 . -1) 294) nil (26125 36881 134308 136000) 0 nil])
([nil nil ((144 . 149)) nil (26125 36881 134291 191000) 0 nil])
([nil nil ((#("p" 0 1 (ws-butler-chg chg fontified t)) . -145) (undo-tree-id200 . -1) (#("m" 0 1 (ws-butler-chg chg fontified t)) . -146) (undo-tree-id201 . -1) (#("s" 0 1 (ws-butler-chg chg fontified t)) . -147) (undo-tree-id202 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t)) . -148) (undo-tree-id203 . -1) 149) nil (26125 36881 134281 802000) 0 nil])
([nil nil ((145 . 158)) nil (26125 36881 134208 543000) 0 nil])
([nil nil ((#("s" 0 1 (ws-butler-chg chg fontified t)) . -157) (undo-tree-id199 . -1) 158) nil (26125 36881 134201 210000) 0 nil])
([nil nil ((157 . 163)) nil (26125 36881 134189 692000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -161) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("(" 0 1 (ws-butler-chg chg fontified t)) . -162) (undo-tree-id197 . -1) (undo-tree-id198 . -1) 163) nil (26125 36881 134181 136000) 0 nil])
([nil nil ((161 . 164)) nil (26125 36881 134155 562000) 0 nil])
([nil nil ((#("f" 0 1 (ws-butler-chg chg fontified t)) . -162) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("s" 0 1 (ws-butler-chg chg fontified t)) . -163) (undo-tree-id192 . -1) (undo-tree-id193 . -1) 164) nil (26125 36881 134147 321000) 0 nil])
([nil nil ((162 . 163)) nil (26125 36881 134124 507000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -162) (undo-tree-id188 . -1) (undo-tree-id189 . -1) 163) nil (26125 36881 134116 766000) 0 nil])
([nil nil ((162 . 164)) nil (26125 36881 134101 211000) 0 nil])
([nil nil ((#(";" 0 1 (ws-butler-chg chg fontified t)) . -162) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("c" 0 1 (ws-butler-chg chg fontified t)) . -163) (undo-tree-id186 . -1) (undo-tree-id187 . -1) 164) nil (26125 36881 134092 451000) 0 nil])
([nil nil ((162 . 168)) nil (26125 36881 134069 25000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg chg fontified nil)) . -166) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#(";" 0 1 (ws-butler-chg chg fontified t)) . -167) (undo-tree-id182 . -1) (undo-tree-id183 . -1) 168) nil (26125 36881 134058 970000) 0 nil])
([nil nil ((166 . 168)) nil (26125 36881 134010 729000) 0 nil])
([nil nil ((168 . 169)) nil (26125 36881 134004 211000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg)) . 313) 169) nil (26125 36881 133985 637000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-keyword-face fontified t)) . 144) (t 26125 36881 147753 151000)) nil (26125 36891 829622 721000) 0 nil])
([nil nil ((144 . 145)) nil (26125 36891 829614 73000) 0 nil])
([nil nil ((159 . 160)) nil (26125 36891 829596 36000) 0 nil])
([nil nil ((314 . 318) (t 26125 36891 843706 512000)) nil (26125 36965 362223 450000) 0 nil])
([nil nil ((318 . 339)) nil (26125 36965 362216 357000) 0 nil])
([nil nil ((339 . 343)) nil (26125 36965 362210 302000) 0 nil])
([nil nil ((343 . 344)) nil (26125 36965 362204 283000) 0 nil])
([nil nil ((342 . 345)) nil (26125 36965 362198 413000) 0 nil])
([nil nil ((#("v" 0 1 (ws-butler-chg chg fontified t)) . -344) (undo-tree-id215 . -1) 345) nil (26125 36965 362191 172000) 0 nil])
([nil nil ((344 . 345)) nil (26125 36965 362180 339000) 0 nil])
([nil nil ((#("c" 0 1 (ws-butler-chg chg fontified t)) . -344) (undo-tree-id214 . -1) 345) nil (26125 36965 362173 6000) 0 nil])
([nil nil ((344 . 355)) nil (26125 36965 362161 820000) 0 nil])
([nil nil ((#("." 0 1 (ws-butler-chg chg fontified t)) . -348) (undo-tree-id207 . -1) (#("c" 0 1 (ws-butler-chg chg fontified t)) . -349) (undo-tree-id208 . -1) (#("o" 0 1 (ws-butler-chg chg fontified t)) . -350) (undo-tree-id209 . -1) (#("n" 0 1 (ws-butler-chg chg fontified t)) . -351) (undo-tree-id210 . -1) (#("c" 0 1 (ws-butler-chg chg fontified t)) . -352) (undo-tree-id211 . -1) (#("a" 0 1 (ws-butler-chg chg fontified t)) . -353) (undo-tree-id212 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t)) . -354) (undo-tree-id213 . -1) 355) nil (26125 36965 362149 858000) 0 nil])
([nil nil ((348 . 351)) nil (26125 36965 773916 211000) 0 nil])
([nil nil ((351 . 356)) nil (26125 37051 50000 151000) 0 nil] [nil nil ((350 . 367) (#(" " 0 1 (ws-butler-chg chg fontified t)) . 350) (undo-tree-id206 . -1) 351) ((nil ws-butler-chg delete 351 . 352) (350 . 351) (#("
                " 0 1 (ws-butler-chg chg fontified t) 1 17 (ws-butler-chg chg fontified t)) . 350) (undo-tree-id221 . -17) (undo-tree-id222 . -17) (undo-tree-id223 . -1)) (26125 36965 362568 856000) 0 nil])
([nil nil ((#("m" 0 1 (ws-butler-chg chg fontified nil)) . -354) (undo-tree-id252 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -355) (undo-tree-id253 . -1) 356) nil (26125 37051 49992 392000) 0 nil])
([nil nil ((367 . 368)) ((#("\"" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . 367) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1)) (26125 36965 362058 562000) 0 nil])
([nil nil ((354 . 355)) nil (26125 37051 49977 577000) 0 nil])
nil
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -354) (undo-tree-id251 . -1) 355) nil (26125 37051 49970 281000) 0 nil])
([nil nil ((354 . 356)) nil (26125 37051 49959 429000) 0 nil])
([nil nil ((313 . 318)) nil (26125 37051 49953 651000) 0 nil])
([nil nil ((318 . 322)) nil (26125 37051 49947 725000) 0 nil])
([nil nil ((#("l" 0 1 (ws-butler-chg chg fontified t)) . -318) (undo-tree-id247 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t)) . -319) (undo-tree-id248 . -1) (#("t" 0 1 (face font-lock-keyword-face ws-butler-chg chg fontified t)) . -320) (undo-tree-id249 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -321) (undo-tree-id250 . -1) 322) nil (26125 37051 49938 929000) 0 nil])
([nil nil ((318 . 321)) nil (26125 37051 49915 744000) 0 nil])
([nil nil ((#("c" 0 1 (ws-butler-chg chg fontified t)) . -318) (undo-tree-id244 . -1) (#("a" 0 1 (ws-butler-chg chg fontified t)) . -319) (undo-tree-id245 . -1) (#("r" 0 1 (ws-butler-chg chg fontified t)) . -320) (undo-tree-id246 . -1) 321) nil (26125 37051 49907 22000) 0 nil])
([nil nil ((318 . 323)) nil (26125 37051 49856 466000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-variable-name-face ws-butler-chg chg fontified t)) . -322) (undo-tree-id243 . -1) 323) nil (26125 37051 49849 133000) 0 nil])
([nil nil ((322 . 340)) nil (26125 37051 49838 318000) 0 nil])
([nil nil ((340 . 346)) nil (26125 37051 49832 504000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg)) . -381) (undo-tree-id237 . -1) (#("+" 0 1 (fontified t ws-butler-chg chg)) . -382) (undo-tree-id238 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -383) (undo-tree-id239 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -384) (undo-tree-id240 . -1) (#(";" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -385) (undo-tree-id241 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -386) (undo-tree-id242 . -1) 387) nil (26125 37051 49821 393000) 0 nil])
([nil nil ((382 . 389)) nil (26125 37051 49790 670000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t ws-butler-chg chg)) . -387) (undo-tree-id235 . -1) (#("g" 0 1 (fontified t ws-butler-chg chg)) . -388) (undo-tree-id236 . -1) 389) nil (26125 37051 49782 522000) 0 nil])
([nil nil ((387 . 388)) nil (26125 37051 49767 726000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t ws-butler-chg chg)) . -384) (undo-tree-id231 . -1) (#("l" 0 1 (fontified t ws-butler-chg chg)) . -385) (undo-tree-id232 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg)) . -386) (undo-tree-id233 . -1) (#("g" 0 1 (fontified t ws-butler-chg chg)) . -387) (undo-tree-id234 . -1) 388) nil (26125 37051 49758 22000) 0 nil])
([nil nil ((384 . 392)) nil (26125 37051 49734 893000) 0 nil])
([nil nil ((392 . 395)) nil (26125 37051 49728 819000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t ws-butler-chg chg)) . -394) (undo-tree-id230 . -1) 395) nil (26125 37051 49721 523000) 0 nil])
([nil nil ((394 . 399)) nil (26125 37051 49710 41000) 0 nil])
([nil nil ((398 . 401)) nil (26125 37051 49704 171000) 0 nil])
([nil nil ((402 . 408)) nil (26125 37051 49697 763000) 0 nil])
([nil nil ((407 . 410)) nil (26125 37051 49691 967000) 0 nil])
([nil nil ((410 . 419)) nil (26125 37051 49685 801000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t ws-butler-chg chg)) . -416) (undo-tree-id227 . -1) (#("t" 0 1 (fontified nil ws-butler-chg chg)) . -417) (undo-tree-id228 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -418) (undo-tree-id229 . -1) 419) nil (26125 37051 49676 615000) 0 nil])
([nil nil ((416 . 426)) nil (26125 37051 49655 930000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t ws-butler-chg chg)) . -425) (undo-tree-id226 . -1) 426) nil (26125 37051 49647 986000) 0 nil])
([nil nil ((425 . 429)) nil (26125 37051 49636 60000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t ws-butler-chg chg)) . -427) (undo-tree-id224 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -428) (undo-tree-id225 . -1) 429) nil (26125 37051 49626 319000) 0 nil])
([nil nil ((427 . 439)) nil (26125 37051 49575 912000) 0 nil])
([nil nil ((345 . 346) (t 26125 37051 67012 429000)) nil (26125 37070 412355 436000) 0 nil])
([nil nil ((347 . 348)) nil (26125 37070 412335 733000) 0 nil])
([nil nil ((348 . 349) (t 26125 37070 426928 58000)) nil (26125 37071 567662 587000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -416) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("r" 0 1 (fontified t)) . -417) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (#("e" 0 1 (fontified t)) . -418) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (#("t" 0 1 (fontified t)) . -419) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (#("u" 0 1 (fontified t)) . -420) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (#("r" 0 1 (fontified t)) . -421) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -422) (undo-tree-id272 . -1) 423 (t 26125 37071 582923 20000)) nil (26125 37088 336594 864000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg delete fontified t)) . 416)) nil (26125 37088 336445 86000) 0 nil])
([nil nil ((416 . 417)) nil (26125 37088 336428 661000) 0 nil])
([nil nil ((#("console.log(\"VOTING!\", req.body.vote);" 0 12 (fontified t) 12 13 (face font-lock-string-face fontified t) 13 20 (face font-lock-string-face fontified t) 20 21 (face font-lock-string-face fontified t) 21 23 (fontified t) 23 26 (fontified t) 26 31 (fontified t) 31 32 (fontified t) 32 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t)) . -444) (undo-tree-id281 . -26) (undo-tree-id282 . -26) (undo-tree-id283 . -38) (undo-tree-id284 . -38) 482 (t 26125 37088 354849 932000)) nil (26125 37159 860266 639000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -439) (undo-tree-id279 . -1) (undo-tree-id280 . -1) 440) nil (26125 37159 860242 398000) 0 nil])
([nil nil ((#("    " 0 1 (ws-butler-chg delete fontified t) 1 3 (fontified t) 3 4 (fontified t)) . 439) (undo-tree-id273 . -4) (undo-tree-id274 . -4) (undo-tree-id275 . -4) (undo-tree-id276 . -4) (undo-tree-id277 . -4) (undo-tree-id278 . -4)) nil (26125 37159 860217 472000) 0 nil])
([nil nil ((170 . 171) (t 26125 37159 870538 316000)) nil (26126 42652 940606 74000) 0 nil])
([nil nil ((170 . 174)) nil (26126 42652 940599 37000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t ws-butler-chg chg)) . -172) (undo-tree-id139 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -173) (undo-tree-id140 . -1) 174) nil (26126 42652 940590 797000) 0 nil])
([nil nil ((172 . 183)) nil (26126 42652 940575 408000) 0 nil])
([nil nil ((#("K" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -181) (undo-tree-id137 . -1) (#("J" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -182) (undo-tree-id138 . -1) 183) nil (26126 42652 940567 223000) 0 nil])
([nil nil ((181 . 183)) nil (26126 42652 940551 908000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -182) (undo-tree-id136 . -1) 183) nil (26126 42652 940544 556000) 0 nil])
([nil nil ((182 . 186)) nil (26126 42652 940533 260000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t ws-butler-chg chg)) . -184) (undo-tree-id134 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -185) (undo-tree-id135 . -1) 186) nil (26126 42652 940525 260000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -182) (undo-tree-id132 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -183) (undo-tree-id133 . -1) 184) nil (26126 42652 940508 186000) 0 nil])
([nil nil ((182 . 194)) nil (26126 42652 940492 482000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -176) (undo-tree-id114 . -1) (#("x" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -177) (undo-tree-id115 . -1) (#("c" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -178) (undo-tree-id116 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -179) (undo-tree-id117 . -1) (#("l" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -180) (undo-tree-id118 . -1) (#("J" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -181) (undo-tree-id119 . -1) (#("S" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -182) (undo-tree-id120 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -183) (undo-tree-id121 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -184) (undo-tree-id122 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -185) (undo-tree-id123 . -1) (#("q" 0 1 (fontified t ws-butler-chg chg)) . -186) (undo-tree-id124 . -1) (#("u" 0 1 (fontified t ws-butler-chg chg)) . -187) (undo-tree-id125 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg)) . -188) (undo-tree-id126 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -189) (undo-tree-id127 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -190) (undo-tree-id128 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -191) (undo-tree-id129 . -1) (#("(" 0 1 (fontified t ws-butler-chg chg)) . -192) (undo-tree-id130 . -1) (#("(" 0 1 (fontified t ws-butler-chg chg)) . -193) (undo-tree-id131 . -1) 194) nil (26126 42652 940475 390000) 0 nil])
([nil nil ((176 . 188)) nil (26126 42652 940393 335000) 0 nil])
([nil nil ((188 . 200)) nil (26126 42652 940387 149000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -197) (undo-tree-id111 . -1) (#(")" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -198) (undo-tree-id112 . -1) (#(";" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -199) (undo-tree-id113 . -1) 200) nil (26126 42652 940378 353000) 0 nil])
([nil nil ((197 . 200)) nil (26126 42652 940359 57000) 0 nil])
([nil nil ((201 . 205)) nil (26126 42652 940353 205000) 0 nil])
([nil nil ((203 . 224)) nil (26126 42652 940347 298000) 0 nil])
([nil nil ((224 . 227)) nil (26126 42652 940341 409000) 0 nil])
([nil nil ((227 . 238)) nil (26126 42652 940335 465000) 0 nil])
([nil nil ((238 . 239)) nil (26126 42652 940329 428000) 0 nil])
([nil nil ((239 . 257)) nil (26126 42652 940323 316000) 0 nil])
([nil nil ((257 . 263)) nil (26126 42652 940316 983000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -261) (undo-tree-id109 . -1) (#("l" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -262) (undo-tree-id110 . -1) 263) nil (26126 42652 940308 557000) 0 nil])
([nil nil ((261 . 267)) nil (26126 42652 940288 428000) 0 nil])
([nil nil ((267 . 277)) nil (26126 42652 940270 483000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -273) (undo-tree-id105 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -274) (undo-tree-id106 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -275) (undo-tree-id107 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -276) (undo-tree-id108 . -1) 277) nil (26126 42652 940245 2000) 0 nil])
([nil nil ((273 . 286)) nil (26126 42652 940221 391000) 0 nil])
([nil nil ((346 . 347)) nil (26126 42652 940215 539000) 0 nil])
([nil nil ((394 . 399)) nil (26126 42652 940209 761000) 0 nil])
([nil nil ((399 . 409)) nil (26126 42652 940203 891000) 0 nil])
([nil nil ((409 . 430)) nil (26126 42652 940197 873000) 0 nil])
([nil nil ((430 . 438)) nil (26126 42652 940191 910000) 0 nil])
([nil nil ((#("f" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -423) (undo-tree-id90 . -1) (#("r" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -424) (undo-tree-id91 . -1) (#("o" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -425) (undo-tree-id92 . -1) (#("m" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -426) (undo-tree-id93 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -427) (undo-tree-id94 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -428) (undo-tree-id95 . -1) (#("h" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -429) (undo-tree-id96 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -430) (undo-tree-id97 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -431) (undo-tree-id98 . -1) (#("w" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -432) (undo-tree-id99 . -1) (#("o" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -433) (undo-tree-id100 . -1) (#("r" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -434) (undo-tree-id101 . -1) (#("k" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -435) (undo-tree-id102 . -1) (#("s" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -436) (undo-tree-id103 . -1) (#("h" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -437) (undo-tree-id104 . -1) 438) nil (26126 42652 940176 558000) 0 nil])
([nil nil ((423 . 442)) nil (26126 42652 940099 669000) 0 nil])
([nil nil ((#("k" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -441) (undo-tree-id89 . -1) 442) nil (26126 42652 940092 58000) 0 nil])
([nil nil ((#("t" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -435) (undo-tree-id83 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -436) (undo-tree-id84 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -437) (undo-tree-id85 . -1) (#("w" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -438) (undo-tree-id86 . -1) (#("o" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -439) (undo-tree-id87 . -1) (#("r" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -440) (undo-tree-id88 . -1) 441) nil (26126 42652 940074 95000) 0 nil])
([nil nil ((435 . 440)) nil (26126 42652 940041 781000) 0 nil])
([nil nil ((#("o" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -439) (undo-tree-id82 . -1) 440) nil (26126 42652 940034 151000) 0 nil])
([nil nil ((439 . 448)) nil (26126 42652 940023 114000) 0 nil])
([nil nil ((612 . 617)) nil (26126 42652 940017 133000) 0 nil])
([nil nil ((617 . 628)) nil (26126 42652 940011 244000) 0 nil])
([nil nil ((628 . 637)) nil (26126 42652 940005 281000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t ws-butler-chg chg)) . -636) (undo-tree-id81 . -1) 637) nil (26126 42652 939997 929000) 0 nil])
([nil nil ((636 . 637)) nil (26126 42652 939986 818000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t ws-butler-chg chg)) . -634) (undo-tree-id80 . -1) 635) nil (26126 42652 939979 22000) 0 nil])
([nil nil ((634 . 637)) nil (26126 42652 939967 651000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t ws-butler-chg chg)) . -635) (undo-tree-id79 . -1) 636) nil (26126 42652 939960 318000) 0 nil])
([nil nil ((635 . 650)) nil (26126 42652 939949 207000) 0 nil])
([nil nil ((650 . 671)) nil (26126 42652 939943 133000) 0 nil])
([nil nil ((671 . 676)) nil (26126 42652 939936 818000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t ws-butler-chg chg)) . -617) (undo-tree-id70 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -618) (undo-tree-id71 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -619) (undo-tree-id72 . -1) (#("k" 0 1 (fontified t ws-butler-chg chg)) . -620) (undo-tree-id73 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -621) (undo-tree-id74 . -1) (#("h" 0 1 (fontified t ws-butler-chg chg)) . -622) (undo-tree-id75 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -623) (undo-tree-id76 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -624) (undo-tree-id77 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -625) (undo-tree-id78 . -1) 626) nil (26126 42652 939924 837000) 0 nil])
([nil nil ((617 . 626)) nil (26126 42652 939880 578000) 0 nil])
([nil nil ((491 . 493)) nil (26126 42652 939874 467000) 0 nil])
([nil nil ((529 . 531)) nil (26126 42652 939868 245000) 0 nil])
([nil nil ((616 . 621)) nil (26126 42652 939862 263000) 0 nil])
([nil nil ((621 . 624)) nil (26126 42652 939856 393000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t ws-butler-chg chg)) . -623) (undo-tree-id69 . -1) 624) nil (26126 42652 939849 41000) 0 nil])
([nil nil ((623 . 624)) nil (26126 42652 939838 4000) 0 nil])
([nil nil ((624 . 627)) nil (26126 42652 939832 208000) 0 nil])
([nil nil ((#("dinoVotes.addRow({datetime: new Date(), vote: req.body.vote}])" 0 9 (ws-butler-chg chg fontified t) 9 10 (ws-butler-chg delete fontified t) 10 28 (ws-butler-chg chg fontified t) 28 31 (ws-butler-chg chg fontified t face font-lock-keyword-face) 31 32 (ws-butler-chg chg fontified t) 32 36 (ws-butler-chg chg fontified t face font-lock-type-face) 36 59 (ws-butler-chg chg fontified t) 59 60 (ws-butler-chg delete fontified t) 60 61 (ws-butler-chg delete fontified t) 61 62 (ws-butler-chg chg fontified t)) . 632) (undo-tree-id67 . -62) (undo-tree-id68 . -62) 694) nil (26126 42652 939824 597000) 0 nil])
([nil nil ((626 . 631)) nil (26126 42652 939809 541000) 0 nil])
([nil nil ((628 . 632) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . 627) (627 . 635) (627 . 628) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 627) (undo-tree-id66 . -4) 631) nil (26126 42652 939801 152000) 0 nil])
([nil nil ((627 . 635)) nil (26126 42652 939786 800000) 0 nil])
([nil nil ((nil rear-nonsticky nil 696 . 697) (nil fontified nil 696 . 697) (nil fontified nil 695 . 696) (nil fontified nil 694 . 695) (nil fontified nil 671 . 694) (nil fontified nil 667 . 671) (nil fontified nil 666 . 667) (nil fontified nil 663 . 666) (nil fontified nil 645 . 663) (nil fontified nil 644 . 645) (nil fontified nil 635 . 644) (635 . 697)) nil (26126 42652 939778 986000) 0 nil])
([nil nil ((703 . 708)) nil (26126 42652 939764 115000) 0 nil])
([nil nil ((#("h" 0 1 (ws-butler-chg chg fontified t)) . -707) (undo-tree-id65 . -1) 708) nil (26126 42652 939756 634000) 0 nil])
([nil nil ((715 . 724) (698 . 706) (#("    " 0 4 (ws-butler-chg chg fontified nil)) . 698) (707 . 711)) nil (26126 42652 939737 356000) 0 nil])
([nil nil ((723 . 732)) nil (26126 42652 939728 449000) 0 nil])
([nil nil ((725 . 733) (#("            " 0 12 (ws-butler-chg chg fontified nil)) . 724) (724 . 736) (724 . 725) (#("        " 0 8 (ws-butler-chg chg fontified t)) . 724) (undo-tree-id64 . -8) 732) nil (26126 42652 939719 653000) 0 nil])
([nil nil ((724 . 736)) nil (26126 42652 939704 727000) 0 nil])
([nil nil ((736 . 738)) nil (26126 42652 939698 116000) 0 nil])
([nil nil ((738 . 744)) nil (26126 42652 939691 894000) 0 nil])
([nil nil ((#("a" 0 1 (ws-butler-chg chg fontified t)) . -742) (undo-tree-id62 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t)) . -743) (undo-tree-id63 . -1) 744) nil (26126 42652 939683 820000) 0 nil])
([nil nil ((742 . 756)) nil (26126 42652 939667 764000) 0 nil])
([nil nil ((723 . 736)) nil (26126 42652 939661 820000) 0 nil])
([nil nil ((736 . 748)) nil (26126 42652 939655 857000) 0 nil])
([nil nil ((#("l" 0 1 (ws-butler-chg chg fontified t)) . -744) (undo-tree-id58 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t)) . -745) (undo-tree-id59 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t)) . -746) (undo-tree-id60 . -1) (#("r" 0 1 (ws-butler-chg chg fontified t)) . -747) (undo-tree-id61 . -1) 748) nil (26126 42652 939646 560000) 0 nil])
([nil nil ((744 . 746)) nil (26126 42652 939622 116000) 0 nil])
([nil nil ((#("e" 0 1 (ws-butler-chg chg fontified t)) . -745) (undo-tree-id57 . -1) 746) nil (26126 42652 939614 357000) 0 nil])
([nil nil ((745 . 766)) nil (26126 42652 939602 950000) 0 nil])
([nil nil ((766 . 772)) nil (26126 42652 939596 561000) 0 nil])
([nil nil ((772 . 775)) nil (26126 42652 939590 505000) 0 nil])
([nil nil ((#("," 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -773) (undo-tree-id55 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -774) (undo-tree-id56 . -1) 775) nil (26126 42652 939581 968000) 0 nil])
([nil nil ((773 . 776)) nil (26126 42652 939566 190000) 0 nil])
([nil nil ((#("'" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -773) (undo-tree-id52 . -1) (#("," 0 1 (ws-butler-chg chg fontified t)) . -774) (undo-tree-id53 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -775) (undo-tree-id54 . -1) 776) nil (26126 42652 939557 413000) 0 nil])
([nil nil ((773 . 784)) nil (26126 42652 939537 709000) 0 nil])
([nil nil ((817 . 838)) nil (26126 42652 939531 765000) 0 nil])
([nil nil ((838 . 845)) nil (26126 42652 939525 654000) 0 nil])
([nil nil ((697 . 706)) nil (26126 42652 939519 487000) 0 nil])
([nil nil ((706 . 712)) nil (26126 42652 939513 357000) 0 nil])
([nil nil ((711 . 716) (#(" " 0 1 (fontified t ws-butler-chg chg)) . 711) (undo-tree-id51 . -1) 712) nil (26126 42652 939505 339000) 0 nil])
([nil nil ((716 . 718)) nil (26126 42652 939492 932000) 0 nil])
([nil nil ((718 . 724)) nil (26126 42652 939486 691000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t ws-butler-chg chg)) . -716) (undo-tree-id43 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -717) (undo-tree-id44 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -718) (undo-tree-id45 . -1) (#("." 0 1 (fontified t ws-butler-chg chg)) . -719) (undo-tree-id46 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -720) (undo-tree-id47 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -721) (undo-tree-id48 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -722) (undo-tree-id49 . -1) (#("d" 0 1 (fontified t ws-butler-chg chg)) . -723) (undo-tree-id50 . -1) 724) nil (26126 42652 942377 881000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t ws-butler-chg chg)) . -706) (undo-tree-id174 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -707) (undo-tree-id175 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -708) (undo-tree-id176 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -709) (undo-tree-id177 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg face font-lock-keyword-face)) . -710) (undo-tree-id178 . -1) 711) nil (26126 42694 81078 814000) 0 nil] [nil nil ((#(")" 0 1 (ws-butler-chg chg fontified t rear-nonsticky t)) . -696) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (#("
" 0 1 (fontified t ws-butler-chg chg)) . -697) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -698) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -699) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -700) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -701) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -702) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -703) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -704) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -705) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("c" 0 1 (fontified t ws-butler-chg chg)) . -706) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -707) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -708) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -709) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg face font-lock-keyword-face)) . -710) (undo-tree-id42 . -1) 711) ((697 . 711) (nil ws-butler-chg delete 697 . 698) (696 . 697)) (26126 42652 939406 876000) 0 nil])
([nil nil ((#("
        " 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg) 6 7 (fontified t ws-butler-chg chg) 7 8 (fontified t ws-butler-chg chg) 8 9 (fontified t ws-butler-chg chg)) . 697) (undo-tree-id172 . -9) (undo-tree-id173 . -9)) nil (26126 42694 81047 147000) 0 nil])
nil
([nil nil ((#("
    " 0 1 (fontified t ws-butler-chg delete) 1 5 (ws-butler-chg chg fontified t)) . 697) (undo-tree-id170 . -5) (undo-tree-id171 . -5)) nil (26126 42694 80981 426000) 0 nil])
([nil nil ((#("
    " 0 1 (ws-butler-chg delete fontified t) 1 5 (ws-butler-chg chg fontified t)) . 855) (undo-tree-id168 . -5) (undo-tree-id169 . -5)) nil (26126 42694 80966 240000) 0 nil])
([nil nil ((#("res.send('Vote Logged');" 0 9 (fontified t) 9 22 (fontified t face font-lock-string-face) 22 24 (fontified t)) . 860) (undo-tree-id166 . -24) (undo-tree-id167 . -24) 884) nil (26126 42694 80949 500000) 0 nil])
([nil nil ((697 . 706)) nil (26126 42694 80933 759000) 0 nil])
([nil nil ((nil rear-nonsticky nil 729 . 730) (nil fontified nil 728 . 730) (nil fontified nil 715 . 728) (nil fontified nil 706 . 715) (706 . 730)) nil (26126 42694 80925 944000) 0 nil])
([nil nil ((#("}" 0 1 (ws-butler-chg delete fontified t)) . -887) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("
" 0 1 (ws-butler-chg delete fontified t)) . -888) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#(" " 0 1 (fontified t)) . -889) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#(" " 0 1 (fontified t)) . -890) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#(" " 0 1 (fontified t)) . -891) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#(" " 0 1 (fontified t)) . -892) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) 893) nil (26126 42694 80906 37000) 0 nil])
([nil nil ((887 . 888)) nil (26126 42694 80778 519000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -695) (undo-tree-id179 . -1) 696 (t 26126 42694 97800 420000)) nil (26126 42805 85216 319000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face font-lock-type-face)) . -262) (undo-tree-id234 . -1) 263) nil (26126 42814 302437 795000) 0 nil] [nil nil ((#("x" 0 1 (fontified t face font-lock-variable-name-face)) . -176) (undo-tree-id215 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -177) (undo-tree-id216 . -1) 178 (t 26126 42739 225586 134000)) ((176 . 178)) (26126 42804 790568 272000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t face font-lock-type-face)) . -261) (undo-tree-id233 . -1) 262) nil (26126 42814 302423 758000) 0 nil])
([nil nil ((176 . 181)) ((#("Excek" 0 4 (fontified t face font-lock-variable-name-face) 4 5 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . 176) (undo-tree-id226 . -5) (undo-tree-id227 . -4) (undo-tree-id228 . -5)) (26126 42804 503420 709000) 0 nil])
([nil nil ((261 . 270)) nil (26126 42814 302411 202000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -180) (undo-tree-id214 . -1) 181) ((180 . 181)) (26126 42804 342345 28000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -268) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("k" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -269) (undo-tree-id232 . -1) 270) nil (26126 42814 302400 165000) 0 nil])
([nil nil ((180 . 183)) ((#("lJs" 0 2 (fontified t face font-lock-variable-name-face) 2 3 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . 180) (undo-tree-id223 . -3) (undo-tree-id224 . -2) (undo-tree-id225 . -3)) (26126 42804 10160 882000) 0 nil])
([nil nil ((268 . 269)) nil (26126 42814 302340 610000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -182) (undo-tree-id213 . -1) 183) ((182 . 183)) (26126 42803 641850 18000) 0 nil])
([nil nil ((#("const xl = require('exceljs');


const workbook = new xl.Workbook();
const dinoVotes = new workbook.addWorksheet('Votes');
" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 7 (fontified t face font-lock-variable-name-face) 7 8 (fontified t face font-lock-variable-name-face) 8 9 (fontified t) 9 19 (fontified t) 19 28 (fontified t face font-lock-string-face) 28 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 38 (fontified t face font-lock-keyword-face) 38 39 (fontified t) 39 47 (fontified t face font-lock-variable-name-face) 47 50 (fontified t) 50 53 (fontified t face font-lock-keyword-face) 53 54 (fontified t) 54 55 (fontified t face font-lock-type-face) 55 56 (fontified t face font-lock-type-face) 56 57 (fontified t face font-lock-type-face) 57 65 (fontified t face font-lock-type-face) 65 69 (fontified t) 69 74 (fontified t face font-lock-keyword-face) 74 75 (fontified t) 75 76 (fontified t face font-lock-variable-name-face) 76 77 (fontified t face font-lock-variable-name-face) 77 78 (fontified t face font-lock-variable-name-face) 78 79 (fontified t face font-lock-variable-name-face) 79 80 (fontified t face font-lock-variable-name-face) 80 81 (fontified t face font-lock-variable-name-face) 81 82 (fontified t face font-lock-variable-name-face) 82 83 (fontified t face font-lock-variable-name-face) 83 84 (fontified t face font-lock-variable-name-face) 84 85 (fontified t) 85 87 (fontified t) 87 90 (fontified t face font-lock-keyword-face) 90 91 (fontified t) 91 99 (fontified t face font-lock-type-face) 99 100 (fontified t face font-lock-type-face) 100 112 (fontified t face font-lock-type-face) 112 113 (fontified t) 113 120 (fontified t face font-lock-string-face) 120 122 (fontified t) 122 123 (fontified t)) . -170) (undo-tree-id310 . -123) (undo-tree-id311 . -123) 293 (t 26126 42814 325229 742000)) nil (26126 43390 941235 918000) 0 nil])
([nil nil ((182 . 183)) ((#("S" 0 1 (fontified t face font-lock-variable-name-face)) . 182)) (26126 42803 319162 420000) 0 nil])
([nil nil ((#("        dinoVotes.addRow({datetime: new Date(), vote: req.body.vote})" 0 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 36 (fontified t) 36 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 44 (fontified t face font-lock-type-face) 44 67 (fontified t) 67 68 (fontified t) 68 69 (rear-nonsticky t fontified t)) . -510) (undo-tree-id308 . -69) (undo-tree-id309 . -69) 579) nil (26126 43390 941219 492000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -250) (undo-tree-id204 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -251) (undo-tree-id205 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -252) (undo-tree-id206 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -253) (undo-tree-id207 . -1) (#("V" 0 1 (fontified t face font-lock-variable-name-face)) . -254) (undo-tree-id208 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -255) (undo-tree-id209 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -256) (undo-tree-id210 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -257) (undo-tree-id211 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -258) (undo-tree-id212 . -1) 259) ((250 . 259)) (26126 42803 133188 987000) 0 nil])
([nil nil ((170 . 179)) nil (26126 43390 941204 992000) 0 nil])
([nil nil ((250 . 259)) ((#("worksheet" 0 9 (fontified t face font-lock-variable-name-face)) . 250)) (26126 42802 955058 777000) 0 nil])
([nil nil ((#("from csv " 0 9 (fontified t ws-butler-chg chg)) . -170) (undo-tree-id306 . -9) (undo-tree-id307 . -9) 179) nil (26126 43390 941197 178000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t face font-lock-type-face)) . -229) (undo-tree-id202 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -230) (undo-tree-id203 . -1) 231) ((229 . 231)) (26126 42802 741833 788000) 0 nil])
([nil nil ((170 . 171)) nil (26126 43390 941179 363000) 0 nil])
([nil nil ((229 . 236)) ((#("ExcelJs" 0 6 (fontified t face font-lock-type-face) 6 7 (fontified t ws-butler-chg chg face font-lock-type-face)) . 229) (undo-tree-id221 . -6) (undo-tree-id222 . -7)) (26126 42802 499615 975000) 0 nil])
([nil nil ((171 . 186)) nil (26126 43390 941123 474000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t face font-lock-type-face)) . -271) (undo-tree-id200 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -272) (undo-tree-id201 . -1) 273) ((271 . 273)) (26126 42802 313378 525000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -185) (undo-tree-id305 . -1) 186) nil (26126 43390 941115 993000) 0 nil])
([nil nil ((271 . 278)) ((#("ExcelJS" 0 7 (fontified t face font-lock-type-face)) . 271)) (26126 42802 135083 223000) 0 nil])
([nil nil ((185 . 190)) nil (26126 43390 941105 419000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -235) (undo-tree-id199 . -1) 236) ((235 . 236)) (26126 42801 965574 471000) 0 nil])
([nil nil ((190 . 192)) nil (26126 43390 941099 437000) 0 nil])
([nil nil ((235 . 236)) ((#("S" 0 1 (fontified t face font-lock-type-face)) . 235)) (26126 42801 805589 175000) 0 nil])
([nil nil ((191 . 209)) nil (26126 43390 941093 419000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -656) (undo-tree-id196 . -1) (#("e" 0 1 (fontified t)) . -657) (undo-tree-id197 . -1) (#("s" 0 1 (fontified t)) . -658) (undo-tree-id198 . -1) 659) ((656 . 659)) (26126 42801 638630 634000) 0 nil])
([nil nil ((210 . 211)) nil (26126 43390 941087 67000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -651) (undo-tree-id191 . -1) (#("n" 0 1 (fontified t)) . -652) (undo-tree-id192 . -1) (#("o" 0 1 (fontified t)) . -653) (undo-tree-id193 . -1) (#("V" 0 1 (fontified t)) . -654) (undo-tree-id194 . -1) (#("o" 0 1 (fontified t)) . -655) (undo-tree-id195 . -1) 656) ((651 . 656)) (26126 42801 415094 528000) 0 nil])
([nil nil ((211 . 212)) nil (26126 43390 941081 252000) 0 nil])
([nil nil ((651 . 654)) ((#("wok" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg)) . 651) (undo-tree-id219 . -3) (undo-tree-id220 . -3)) (26126 42801 246134 848000) 0 nil])
([nil nil ((212 . 216)) nil (26126 43390 941074 863000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -650) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (#("w" 0 1 (fontified t ws-butler-chg chg)) . -651) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -652) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (#("k" 0 1 (fontified t ws-butler-chg chg)) . -653) (undo-tree-id189 . -1) (undo-tree-id190 . -1) 654) ((650 . 654)) (26126 42801 115123 710000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t ws-butler-chg chg)) . -214) (undo-tree-id303 . -1) (#("=" 0 1 (fontified t ws-butler-chg chg)) . -215) (undo-tree-id304 . -1) 216) nil (26126 43390 941067 252000) 0 nil])
([nil nil ((650 . 659)) ((#("worksheet" 0 9 (fontified t)) . 650) (undo-tree-id217 . -9) (undo-tree-id218 . -9) (t 26126 42791 717337 3000)) (26126 42791 699907 308000) 0 nil])
([nil nil ((214 . 219)) nil (26126 43390 941052 382000) 0 nil])
nil
([nil nil ((#("o" 0 1 (fontified t ws-butler-chg chg)) . -214) (undo-tree-id298 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -215) (undo-tree-id299 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -216) (undo-tree-id300 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -217) (undo-tree-id301 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -218) (undo-tree-id302 . -1) 219) nil (26126 43390 941042 882000) 0 nil])
([nil nil ((214 . 226)) nil (26126 43390 941013 697000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg)) . -223) (undo-tree-id295 . -1) (#("-" 0 1 (fontified t ws-butler-chg chg)) . -224) (undo-tree-id296 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -225) (undo-tree-id297 . -1) 226) nil (26126 43390 941004 623000) 0 nil])
([nil nil ((223 . 228)) nil (26126 43390 940986 197000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil ws-butler-chg chg)) . 228) (228 . 232) (227 . 229)) nil (26126 43390 940979 456000) 0 nil])
([nil nil ((228 . 232)) nil (26126 43390 940971 974000) 0 nil])
([nil nil ((232 . 238)) nil (26126 43390 940966 30000) 0 nil])
([nil nil ((#("const toCSV = {
    data: 
}" 0 5 (fontified t ws-butler-chg chg face font-lock-keyword-face) 5 6 (fontified t ws-butler-chg chg) 6 11 (fontified t ws-butler-chg chg face font-lock-variable-name-face) 11 16 (fontified t ws-butler-chg chg) 16 26 (fontified t ws-butler-chg chg) 26 27 (fontified t ws-butler-chg delete) 27 28 (ws-butler-chg chg fontified t)) . -212) (undo-tree-id293 . -28) (undo-tree-id294 . -28) 240) nil (26126 43390 940958 678000) 0 nil])
([nil nil ((211 . 213)) nil (26126 43390 940944 604000) 0 nil])
([nil nil ((213 . 226)) nil (26126 43390 940938 382000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -224) (undo-tree-id291 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -225) (undo-tree-id292 . -1) 226) nil (26126 43390 940930 567000) 0 nil])
([nil nil ((224 . 236)) nil (26126 43390 940915 882000) 0 nil])
([nil nil ((236 . 240)) nil (26126 43390 940910 49000) 0 nil])
([nil nil ((239 . 241)) nil (26126 43390 940904 327000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t ws-butler-chg chg)) . -239) (undo-tree-id289 . -1) (#(";" 0 1 (fontified t ws-butler-chg chg)) . -240) (undo-tree-id290 . -1) 241) nil (26126 43390 940896 289000) 0 nil])
([nil nil ((239 . 241)) nil (26126 43390 940881 752000) 0 nil])
([nil nil ((240 . 247)) nil (26126 43390 940875 623000) 0 nil])
([nil nil ((247 . 252)) nil (26126 43390 940869 697000) 0 nil])
([nil nil ((252 . 256)) nil (26126 43390 940863 12000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -239) (undo-tree-id272 . -1) (#("d" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -240) (undo-tree-id273 . -1) (#("u" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -241) (undo-tree-id274 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -242) (undo-tree-id275 . -1) (#("l" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -243) (undo-tree-id276 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -244) (undo-tree-id277 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -245) (undo-tree-id278 . -1) (#("g" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -246) (undo-tree-id279 . -1) (#("d" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -247) (undo-tree-id280 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -248) (undo-tree-id281 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -249) (undo-tree-id282 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -250) (undo-tree-id283 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -251) (undo-tree-id284 . -1) (#("." 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -252) (undo-tree-id285 . -1) (#("c" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -253) (undo-tree-id286 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -254) (undo-tree-id287 . -1) (#("v" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -255) (undo-tree-id288 . -1) 256) nil (26126 43390 940845 864000) 0 nil])
([nil nil ((239 . 243)) nil (26126 43390 940751 105000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t ws-butler-chg chg)) . -240) (undo-tree-id269 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg)) . -241) (undo-tree-id270 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -242) (undo-tree-id271 . -1) 243) nil (26126 43390 940742 253000) 0 nil])
([nil nil ((240 . 243)) nil (26126 43390 940723 734000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t ws-butler-chg chg)) . -242) (undo-tree-id268 . -1) 243) nil (26126 43390 940716 438000) 0 nil])
([nil nil ((242 . 245)) nil (26126 43390 940705 290000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t ws-butler-chg delete face font-lock-string-face)) . 245)) nil (26126 43390 940699 105000) 0 nil])
([nil nil ((245 . 257)) nil (26126 43390 940693 272000) 0 nil])
([nil nil ((258 . 261)) nil (26126 43390 940687 475000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil ws-butler-chg chg)) . 261) (261 . 265) (260 . 262)) nil (26126 43390 940680 975000) 0 nil])
([nil nil ((261 . 265)) nil (26126 43390 940673 383000) 0 nil])
([nil nil ((258 . 261)) nil (26126 43390 940667 364000) 0 nil])
([nil nil ((268 . 285)) nil (26126 43390 940661 383000) 0 nil])
([nil nil ((#("c" 0 1 (ws-butler-chg chg fontified t)) . -268) (undo-tree-id251 . -1) (#("o" 0 1 (ws-butler-chg chg fontified t)) . -269) (undo-tree-id252 . -1) (#("n" 0 1 (ws-butler-chg chg fontified t)) . -270) (undo-tree-id253 . -1) (#("s" 0 1 (ws-butler-chg chg fontified t)) . -271) (undo-tree-id254 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t face font-lock-keyword-face)) . -272) (undo-tree-id255 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -273) (undo-tree-id256 . -1) (#("f" 0 1 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -274) (undo-tree-id257 . -1) (#("i" 0 1 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -275) (undo-tree-id258 . -1) (#("l" 0 1 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -276) (undo-tree-id259 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -277) (undo-tree-id260 . -1) (#("n" 0 1 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -278) (undo-tree-id261 . -1) (#("a" 0 1 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -279) (undo-tree-id262 . -1) (#("m" 0 1 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -280) (undo-tree-id263 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -281) (undo-tree-id264 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -282) (undo-tree-id265 . -1) (#("=" 0 1 (ws-butler-chg chg fontified t)) . -283) (undo-tree-id266 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -284) (undo-tree-id267 . -1) 285) nil (26126 43390 940642 827000) 0 nil])
([nil nil ((268 . 271)) nil (26126 43390 940554 476000) 0 nil])
([nil nil ((#("w" 0 1 (ws-butler-chg chg fontified t)) . -269) (undo-tree-id249 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t)) . -270) (undo-tree-id250 . -1) 271) nil (26126 43390 940546 13000) 0 nil])
([nil nil ((269 . 276)) nil (26126 43390 940530 846000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -274) (undo-tree-id247 . -1) (#("C" 0 1 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -275) (undo-tree-id248 . -1) 276) nil (26126 43390 940522 957000) 0 nil])
([nil nil ((274 . 280)) nil (26126 43390 940506 605000) 0 nil])
([nil nil ((#("t" 0 1 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -272) (undo-tree-id239 . -1) (#("o" 0 1 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -273) (undo-tree-id240 . -1) (#("C" 0 1 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -274) (undo-tree-id241 . -1) (#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -275) (undo-tree-id242 . -1) (#("V" 0 1 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -276) (undo-tree-id243 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -277) (undo-tree-id244 . -1) (#("=" 0 1 (ws-butler-chg chg fontified t)) . -278) (undo-tree-id245 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -279) (undo-tree-id246 . -1) 280) nil (26126 43390 940494 402000) 0 nil])
([nil nil ((272 . 273)) nil (26126 43390 940454 791000) 0 nil])
([nil nil ((#("d" 0 1 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -272) (undo-tree-id238 . -1) 273) nil (26126 43390 940447 124000) 0 nil])
([nil nil ((272 . 280)) nil (26126 43390 940436 13000) 0 nil])
([nil nil ((279 . 283)) nil (26126 43390 940430 161000) 0 nil])
([nil nil ((283 . 292)) nil (26126 43390 940424 383000) 0 nil])
([nil nil ((#("i" 0 1 (ws-butler-chg chg fontified t)) . -291) (undo-tree-id237 . -1) 292) nil (26126 43390 940417 50000) 0 nil])
([nil nil ((291 . 301)) nil (26126 43390 940405 587000) 0 nil])
([nil nil ((300 . 303)) nil (26126 43390 940399 272000) 0 nil])
([nil nil ((303 . 310)) nil (26126 43390 940393 180000) 0 nil])
([nil nil ((#("," 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -309) (undo-tree-id236 . -1) 310) nil (26126 43390 940385 235000) 0 nil])
([nil nil ((309 . 313)) nil (26126 43390 940372 735000) 0 nil])
([nil nil ((#(";" 0 1 (ws-butler-chg chg fontified t)) . -312) (undo-tree-id235 . -1) 313) nil (26126 43390 940364 661000) 0 nil])
([nil nil ((312 . 317)) nil (26126 43390 941556 10000) 0 nil])
([nil nil ((317 . 318)) nil (26126 43694 840834 397000) 0 nil] [nil nil ((317 . 318)) ((#("
" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . 317) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1)) (26126 43390 940312 69000) 0 nil])
([nil nil ((319 . 334)) nil (26126 43694 840825 749000) 0 nil])
nil
([nil nil ((335 . 340)) nil (26126 43694 840816 823000) 0 nil])
([nil nil ((340 . 348)) nil (26126 43694 840808 8000) 0 nil])
([nil nil ((#("e" 0 1 (ws-butler-chg chg fontified t)) . -347) (undo-tree-id427 . -1) 348) nil (26126 43694 840797 286000) 0 nil])
([nil nil ((347 . 349)) nil (26126 43694 840781 8000) 0 nil])
([nil nil ((348 . 350)) nil (26126 43694 840772 120000) 0 nil])
([nil nil ((212 . 232)) nil (26126 43694 840763 472000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -231) (undo-tree-id426 . -1) 232) nil (26126 43694 840752 712000) 0 nil])
([nil nil ((231 . 250)) nil (26126 43694 840736 138000) 0 nil])
([nil nil ((250 . 264)) nil (26126 43694 840727 305000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t ws-butler-chg chg)) . -262) (undo-tree-id424 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg)) . -263) (undo-tree-id425 . -1) 264) nil (26126 43694 840715 416000) 0 nil])
([nil nil ((262 . 265)) nil (26126 43694 840689 490000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t ws-butler-chg chg)) . -262) (undo-tree-id421 . -1) (#("d" 0 1 (fontified t ws-butler-chg chg)) . -263) (undo-tree-id422 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg)) . -264) (undo-tree-id423 . -1) 265) nil (26126 43694 840676 805000) 0 nil])
([nil nil ((262 . 274)) nil (26126 43694 840649 342000) 0 nil])
([nil nil ((274 . 277)) nil (26126 43694 840640 435000) 0 nil])
([nil nil ((#("." 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -272) (undo-tree-id416 . -1) (#("c" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -273) (undo-tree-id417 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -274) (undo-tree-id418 . -1) (#("v" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -275) (undo-tree-id419 . -1) (#("'" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -276) (undo-tree-id420 . -1) 277) nil (26126 43694 840624 916000) 0 nil])
([nil nil ((272 . 274)) nil (26126 43694 840585 46000) 0 nil])
([nil nil ((274 . 275)) nil (26126 43694 840576 398000) 0 nil])
([nil nil ((398 . 403)) nil (26126 43694 840567 602000) 0 nil])
([nil nil ((403 . 407)) nil (26126 43694 840558 713000) 0 nil])
([nil nil ((407 . 418)) nil (26126 43694 840549 861000) 0 nil])
([nil nil ((#("let csv = {data: data, fields: ['DateTime', 'Vote'], header: false}
    let filename = 
    fs.stat('')" 0 3 (ws-butler-chg chg fontified t face font-lock-keyword-face) 3 4 (ws-butler-chg chg fontified t) 4 7 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 7 32 (ws-butler-chg chg fontified t) 32 42 (ws-butler-chg chg fontified t face font-lock-string-face) 42 44 (ws-butler-chg chg fontified t) 44 50 (ws-butler-chg chg fontified t face font-lock-string-face) 50 51 (ws-butler-chg delete fontified t) 51 61 (ws-butler-chg chg fontified t) 61 66 (ws-butler-chg chg fontified t face font-lock-constant-face) 66 67 (ws-butler-chg delete fontified t) 67 68 (ws-butler-chg chg fontified t) 68 72 (ws-butler-chg chg fontified t) 72 75 (ws-butler-chg chg fontified t face font-lock-keyword-face) 75 76 (ws-butler-chg chg fontified t) 76 84 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 84 87 (ws-butler-chg chg fontified t) 87 88 (ws-butler-chg chg fontified t) 88 100 (ws-butler-chg chg fontified t) 100 102 (ws-butler-chg chg fontified t face font-lock-string-face) 102 103 (ws-butler-chg chg fontified t)) . 331) (undo-tree-id414 . -103) (undo-tree-id415 . -103) 434) nil (26126 43694 840538 824000) 0 nil])
([nil nil ((#("const writeToCSV = async (file, fields, data) => {
    
}
" 0 5 (ws-butler-chg chg fontified t face font-lock-keyword-face) 5 6 (ws-butler-chg chg fontified t) 6 16 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 16 19 (ws-butler-chg chg fontified t) 19 24 (ws-butler-chg chg fontified t face font-lock-keyword-face) 24 44 (ws-butler-chg chg fontified t) 44 45 (ws-butler-chg delete fontified t) 45 48 (ws-butler-chg chg fontified t) 48 51 (ws-butler-chg chg fontified t) 51 55 (ws-butler-chg chg fontified t) 55 56 (ws-butler-chg delete fontified t) 56 57 (ws-butler-chg chg fontified t) 57 58 (ws-butler-chg delete fontified t)) . -276) (undo-tree-id412 . -58) (undo-tree-id413 . -58) 334) nil (26126 43694 840515 898000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified nil)) . -344) (nil rear-nonsticky nil 378 . 379) (nil fontified nil 378 . 379) (nil fontified nil 376 . 378) (nil fontified nil 364 . 376) (nil fontified nil 363 . 364) (nil fontified nil 360 . 363) (nil fontified nil 352 . 360) (nil fontified nil 351 . 352) (nil fontified nil 348 . 351) (nil fontified nil 344 . 348) (nil fontified nil 343 . 344) (nil fontified nil 342 . 343) (nil fontified nil 337 . 342) (nil fontified nil 327 . 337) (nil fontified nil 326 . 327) (nil fontified nil 320 . 326) (nil fontified nil 318 . 320) (nil fontified nil 308 . 318) (nil fontified nil 283 . 308) (nil fontified nil 280 . 283) (nil fontified nil 279 . 280) (nil fontified nil 276 . 279) (276 . 379)) nil (26126 43694 840487 806000) 0 nil])
([nil nil ((359 . 366)) nil (26126 43694 840452 139000) 0 nil])
([nil nil ((#("G" 0 1 (ws-butler-chg chg fontified t)) . -365) (undo-tree-id411 . -1) 366) nil (26126 43694 840441 380000) 0 nil])
([nil nil ((365 . 369)) nil (26126 43694 840424 288000) 0 nil])
([nil nil ((369 . 380)) nil (26126 43694 840415 436000) 0 nil])
([nil nil ((#("n" 0 1 (ws-butler-chg chg fontified t)) . -379) (undo-tree-id410 . -1) 380) nil (26126 43694 840404 491000) 0 nil])
([nil nil ((#("fs.stat('')" 0 8 (ws-butler-chg chg fontified t) 8 10 (ws-butler-chg chg fontified t face font-lock-string-face) 10 11 (ws-butler-chg chg rear-nonsticky t fontified t)) . 384) (undo-tree-id408 . -11) (undo-tree-id409 . -11) 395) nil (26126 43694 840385 417000) 0 nil])
([nil nil ((713 . 718)) nil (26126 43694 840364 362000) 0 nil])
([nil nil ((718 . 727)) nil (26126 43694 840355 825000) 0 nil])
([nil nil ((726 . 747)) nil (26126 43694 840346 825000) 0 nil])
([nil nil ((746 . 753)) nil (26126 43694 840337 825000) 0 nil])
([nil nil ((753 . 755)) nil (26126 43694 840329 195000) 0 nil])
([nil nil ((756 . 762)) nil (26126 43694 840320 158000) 0 nil])
([nil nil ((761 . 766)) nil (26126 43694 840311 140000) 0 nil])
([nil nil ((763 . 767) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . 762) (762 . 770) (762 . 763) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 762) (undo-tree-id407 . -4) 766) nil (26126 43694 840298 436000) 0 nil])
([nil nil ((762 . 770)) nil (26126 43694 840277 270000) 0 nil])
([nil nil ((777 . 778)) nil (26126 43694 840268 288000) 0 nil])
([nil nil ((#("fs.stat(filename, function (err, stat) => {
        
    });" 0 18 (fontified t ws-butler-chg chg) 18 26 (fontified t ws-butler-chg chg face font-lock-keyword-face) 26 28 (fontified t ws-butler-chg chg) 28 31 (fontified t ws-butler-chg chg face font-lock-variable-name-face) 31 33 (fontified t ws-butler-chg chg) 33 37 (fontified t ws-butler-chg chg face font-lock-variable-name-face) 37 44 (fontified t ws-butler-chg chg) 44 52 (fontified t ws-butler-chg chg) 52 53 (fontified t ws-butler-chg delete) 53 57 (ws-butler-chg chg fontified t) 57 58 (ws-butler-chg delete fontified t) 58 60 (ws-butler-chg chg fontified t)) . 718) (undo-tree-id405 . -60) (undo-tree-id406 . -60) 778) nil (26126 43694 840257 196000) 0 nil])
([nil nil ((729 . 737)) nil (26126 43694 840235 992000) 0 nil])
([nil nil ((794 . 802) (#("    " 0 4 (ws-butler-chg chg fontified nil)) . 794) (781 . 793) (#("        " 0 8 (ws-butler-chg chg fontified nil)) . 781) (nil rear-nonsticky nil 796 . 797) (nil fontified nil 795 . 797) (nil fontified nil 794 . 795) (nil fontified nil 790 . 794) (nil fontified nil 789 . 790) (nil fontified nil 781 . 789) (nil fontified nil 774 . 781) (nil fontified nil 770 . 774) (nil fontified nil 768 . 770) (nil fontified nil 765 . 768) (nil fontified nil 763 . 765) (nil fontified nil 755 . 763) (nil fontified nil 737 . 755) (737 . 797)) nil (26126 43694 840220 696000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -713) (undo-tree-id404 . -1) 714) nil (26126 43694 840189 714000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -774) (undo-tree-id401 . -1) (#("=" 0 1 (ws-butler-chg chg fontified t)) . -775) (undo-tree-id402 . -1) (#(">" 0 1 (ws-butler-chg chg fontified t)) . -776) (undo-tree-id403 . -1) 777) nil (26126 43694 840169 381000) 0 nil])
([nil nil ((#("f" 0 1 (ws-butler-chg chg fontified t)) . -754) (undo-tree-id394 . -1) (#("u" 0 1 (ws-butler-chg chg fontified t)) . -755) (undo-tree-id395 . -1) (#("n" 0 1 (ws-butler-chg chg fontified t)) . -756) (undo-tree-id396 . -1) (#("c" 0 1 (ws-butler-chg chg fontified t)) . -757) (undo-tree-id397 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t)) . -758) (undo-tree-id398 . -1) (#("i" 0 1 (ws-butler-chg chg fontified t)) . -759) (undo-tree-id399 . -1) (#("o" 0 1 (ws-butler-chg chg fontified t face font-lock-keyword-face)) . -760) (undo-tree-id400 . -1) 761) nil (26126 43694 840134 159000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg delete fontified t)) . 754) (#("n" 0 1 (ws-butler-chg delete fontified t)) . 754)) nil (26126 43694 840082 48000) 0 nil])
([nil nil ((765 . 767)) nil (26126 43694 840071 955000) 0 nil])
([nil nil ((765 . 766)) nil (26126 43694 840063 289000) 0 nil])
([nil nil ((783 . 788)) nil (26126 43694 840054 363000) 0 nil])
([nil nil ((788 . 789)) nil (26126 43694 840045 400000) 0 nil])
([nil nil ((787 . 804) (#(" " 0 1 (ws-butler-chg chg fontified t)) . 787) (undo-tree-id393 . -1) 788) nil (26126 43694 840034 530000) 0 nil])
([nil nil ((789 . 805) (#("                " 0 16 (ws-butler-chg chg fontified nil)) . 788) (788 . 804) (788 . 789) (#("                " 0 16 (ws-butler-chg chg fontified t)) . 788) (undo-tree-id392 . -16) 804) nil (26126 43694 840013 437000) 0 nil])
([nil nil ((788 . 804)) nil (26126 43694 839992 548000) 0 nil])
([nil nil ((804 . 810)) nil (26126 43694 839983 660000) 0 nil])
([nil nil ((#("f" 0 1 (ws-butler-chg chg fontified t)) . -804) (undo-tree-id386 . -1) (#("i" 0 1 (ws-butler-chg chg fontified t)) . -805) (undo-tree-id387 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t)) . -806) (undo-tree-id388 . -1) (#("l" 0 1 (ws-butler-chg chg fontified t)) . -807) (undo-tree-id389 . -1) (#("d" 0 1 (ws-butler-chg chg fontified t)) . -808) (undo-tree-id390 . -1) (#("s" 0 1 (ws-butler-chg chg fontified t)) . -809) (undo-tree-id391 . -1) 810) nil (26126 43694 839967 845000) 0 nil])
([nil nil ((804 . 825)) nil (26126 43694 839921 512000) 0 nil])
([nil nil ((825 . 827)) nil (26126 43694 839912 715000) 0 nil])
([nil nil ((827 . 836)) nil (26126 43694 839903 734000) 0 nil])
([nil nil ((#("f" 0 1 (ws-butler-chg chg fontified t)) . -827) (undo-tree-id377 . -1) (#("i" 0 1 (ws-butler-chg chg fontified t)) . -828) (undo-tree-id378 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t)) . -829) (undo-tree-id379 . -1) (#("l" 0 1 (ws-butler-chg chg fontified t)) . -830) (undo-tree-id380 . -1) (#("d" 0 1 (ws-butler-chg chg fontified t)) . -831) (undo-tree-id381 . -1) (#("s" 0 1 (ws-butler-chg chg fontified t)) . -832) (undo-tree-id382 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -833) (undo-tree-id383 . -1) (#("+" 0 1 (ws-butler-chg chg fontified t)) . -834) (undo-tree-id384 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -835) (undo-tree-id385 . -1) 836) nil (26126 43694 839884 641000) 0 nil])
([nil nil ((827 . 829)) nil (26126 43694 839776 401000) 0 nil])
([nil nil ((828 . 829)) nil (26126 43694 839767 271000) 0 nil])
([nil nil ((#("[" 0 1 (ws-butler-chg chg fontified t)) . -827) (undo-tree-id375 . -1) (#("'" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -828) (undo-tree-id376 . -1) 829) nil (26126 43694 839754 938000) 0 nil])
([nil nil ((275 . 277)) nil (26126 43694 839732 734000) 0 nil])
([nil nil ((275 . 292)) nil (26126 43694 839723 957000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t ws-butler-chg chg)) . -290) (undo-tree-id373 . -1) (#("\\" 0 1 (fontified t ws-butler-chg chg)) . -291) (undo-tree-id374 . -1) 292) nil (26126 43694 839711 883000) 0 nil])
([nil nil ((290 . 291)) nil (26126 43694 839689 86000) 0 nil])
([nil nil ((291 . 292)) nil (26126 43694 839680 235000) 0 nil])
([nil nil ((291 . 309)) nil (26126 43694 839671 68000) 0 nil])
([nil nil ((310 . 311)) nil (26126 43694 921907 236000) 0 nil])
([nil nil ((#("[" 0 1 (ws-butler-chg chg fontified t)) . -345) (undo-tree-id496 . -1) (#("'" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -346) (undo-tree-id497 . -1) (#("D" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -347) (undo-tree-id498 . -1) (#("a" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -348) (undo-tree-id499 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -349) (undo-tree-id500 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -350) (undo-tree-id501 . -1) (#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -351) (undo-tree-id502 . -1) (#("i" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -352) (undo-tree-id503 . -1) (#("m" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -353) (undo-tree-id504 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -354) (undo-tree-id505 . -1) (#("'" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -355) (undo-tree-id506 . -1) (#("," 0 1 (ws-butler-chg chg fontified t)) . -356) (undo-tree-id507 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -357) (undo-tree-id508 . -1) (#("'" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -358) (undo-tree-id509 . -1) (#("V" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -359) (undo-tree-id510 . -1) (#("o" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -360) (undo-tree-id511 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -361) (undo-tree-id512 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -362) (undo-tree-id513 . -1) (#("'" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -363) (undo-tree-id514 . -1) (#("]" 0 1 (ws-butler-chg chg fontified t)) . -364) (undo-tree-id515 . -1) 365) nil (26126 44081 151619 397000) 0 nil] [nil nil ((#("[" 0 1 (ws-butler-chg chg fontified t)) . -345) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (#("'" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -346) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (#("D" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -347) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (#("a" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -348) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -349) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -350) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -351) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (#("i" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -352) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#("m" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -353) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -354) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#("'" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -355) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#("," 0 1 (ws-butler-chg chg fontified t)) . -356) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -357) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#("'" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -358) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("V" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -359) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (#("o" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -360) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -361) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -362) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#("'" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -363) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (#("]" 0 1 (ws-butler-chg chg fontified t)) . -364) (undo-tree-id372 . -1) 365) ((346 . 365) (nil ws-butler-chg delete 346 . 347) (345 . 346)) (26126 43694 841264 433000) 0 nil])
([nil nil ((345 . 351)) nil (26126 44081 151519 749000) 0 nil])
([nil nil ((345 . 351)) ((#("fields" 0 6 (ws-butler-chg chg fontified t)) . 345)) (26126 43694 839155 625000) 0 nil])
([nil nil ((#("]" 0 1 (ws-butler-chg delete fontified t)) . -851) (undo-tree-id495 . -1) 852) nil (26126 44081 151512 453000) 0 nil])
nil
([nil nil ((851 . 852)) nil (26126 44081 151501 249000) 0 nil])
([nil nil ((851 . 865)) nil (26126 44081 151495 360000) 0 nil])
([nil nil ((#("/" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -861) (undo-tree-id491 . -1) (#("r" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -862) (undo-tree-id492 . -1) (#("/" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -863) (undo-tree-id493 . -1) (#("n" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -864) (undo-tree-id494 . -1) 865) nil (26126 44081 151486 175000) 0 nil])
([nil nil ((861 . 870)) nil (26126 44081 151462 934000) 0 nil])
([nil nil ((869 . 872)) nil (26126 44081 151456 694000) 0 nil])
([nil nil ((873 . 879)) nil (26126 44081 151450 916000) 0 nil])
([nil nil ((878 . 895)) nil (26126 44081 151444 768000) 0 nil])
([nil nil ((880 . 896) (#("                    " 0 20 (ws-butler-chg chg fontified nil)) . 879) (879 . 899) (879 . 880) (#("                " 0 16 (ws-butler-chg chg fontified t)) . 879) (undo-tree-id490 . -16) 895) nil (26126 44081 151436 638000) 0 nil])
([nil nil ((879 . 899)) nil (26126 44081 151422 361000) 0 nil])
([nil nil ((899 . 902)) nil (26126 44081 151416 379000) 0 nil])
([nil nil ((#("r" 0 1 (ws-butler-chg chg fontified t)) . -870) (undo-tree-id488 . -1) (#("r" 0 1 (ws-butler-chg chg fontified t)) . -871) (undo-tree-id489 . -1) 872) nil (26126 44081 151408 305000) 0 nil])
([nil nil ((#("e" 0 1 (ws-butler-chg chg fontified t)) . -897) (undo-tree-id485 . -1) (#("r" 0 1 (ws-butler-chg chg fontified t)) . -898) (undo-tree-id486 . -1) (#("r" 0 1 (ws-butler-chg chg fontified t)) . -899) (undo-tree-id487 . -1) 900) nil (26126 44081 151390 657000) 0 nil])
([nil nil ((897 . 903)) nil (26126 44081 151372 9000) 0 nil])
([nil nil ((#("t" 0 1 (ws-butler-chg chg fontified t)) . -897) (undo-tree-id479 . -1) (#("h" 0 1 (ws-butler-chg chg fontified t)) . -898) (undo-tree-id480 . -1) (#("r" 0 1 (ws-butler-chg chg fontified t)) . -899) (undo-tree-id481 . -1) (#("o" 0 1 (ws-butler-chg chg fontified t)) . -900) (undo-tree-id482 . -1) (#("w" 0 1 (ws-butler-chg chg fontified t face font-lock-keyword-face)) . -901) (undo-tree-id483 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -902) (undo-tree-id484 . -1) 903) nil (26126 44081 151361 527000) 0 nil])
([nil nil ((897 . 901)) nil (26126 44081 151330 583000) 0 nil])
([nil nil ((#("?" 0 1 (ws-butler-chg chg fontified t)) . -898) (undo-tree-id476 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -899) (undo-tree-id477 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t)) . -900) (undo-tree-id478 . -1) 901) nil (26126 44081 151321 972000) 0 nil])
([nil nil ((898 . 904)) nil (26126 44081 151302 991000) 0 nil])
([nil nil ((904 . 910)) nil (26126 44081 151297 83000) 0 nil])
([nil nil ((910 . 931)) nil (26126 44081 151291 213000) 0 nil])
([nil nil ((931 . 942)) nil (26126 44081 151285 287000) 0 nil])
([nil nil ((942 . 956)) nil (26126 44081 151279 250000) 0 nil])
([nil nil ((#(";" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -954) (undo-tree-id474 . -1) (#(")" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -955) (undo-tree-id475 . -1) 956) nil (26126 44081 151271 435000) 0 nil])
([nil nil ((954 . 957)) nil (26126 44081 151256 528000) 0 nil])
([nil nil ((994 . 1011)) nil (26126 44081 151250 769000) 0 nil])
([nil nil ((1011 . 1015)) nil (26126 44081 151244 861000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -1014) (undo-tree-id473 . -1) 1015) nil (26126 44081 151237 676000) 0 nil])
([nil nil ((1014 . 1035)) nil (26126 44081 151226 547000) 0 nil])
([nil nil ((1035 . 1038)) nil (26126 44081 151220 510000) 0 nil])
([nil nil ((323 . 326)) nil (26126 44081 151214 787000) 0 nil])
([nil nil ((325 . 329)) nil (26126 44081 151208 917000) 0 nil])
([nil nil ((330 . 333)) nil (26126 44081 151202 954000) 0 nil])
([nil nil ((1048 . 1053)) nil (26126 44081 151197 102000) 0 nil])
([nil nil ((#("c" 0 1 (ws-butler-chg chg fontified t)) . -1045) (undo-tree-id465 . -1) (#("s" 0 1 (ws-butler-chg chg fontified t)) . -1046) (undo-tree-id466 . -1) (#("v" 0 1 (ws-butler-chg chg fontified t)) . -1047) (undo-tree-id467 . -1) (#("(" 0 1 (ws-butler-chg chg fontified t)) . -1048) (undo-tree-id468 . -1) (#("r" 0 1 (ws-butler-chg chg fontified t)) . -1049) (undo-tree-id469 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t)) . -1050) (undo-tree-id470 . -1) (#("q" 0 1 (ws-butler-chg chg fontified t)) . -1051) (undo-tree-id471 . -1) (#("." 0 1 (ws-butler-chg chg fontified t)) . -1052) (undo-tree-id472 . -1) 1053) nil (26126 44081 151184 806000) 0 nil])
([nil nil ((1045 . 1050)) nil (26126 44081 151132 84000) 0 nil])
([nil nil ((1049 . 1051)) nil (26126 44081 151126 177000) 0 nil])
([nil nil ((#("P" 0 1 (ws-butler-chg chg fontified t)) . -1049) (undo-tree-id463 . -1) (#("{" 0 1 (ws-butler-chg chg fontified t)) . -1050) (undo-tree-id464 . -1) 1051) nil (26126 44081 151118 232000) 0 nil])
([nil nil ((1049 . 1051)) nil (26126 44081 151103 566000) 0 nil])
([nil nil ((1049 . 1050)) nil (26126 44081 151097 510000) 0 nil])
([nil nil ((1052 . 1053)) nil (26126 44081 151091 640000) 0 nil])
([nil nil ((1051 . 1052)) nil (26126 44081 151085 769000) 0 nil])
([nil nil ((#(";" 0 1 (ws-butler-chg chg fontified t)) . -1051) (undo-tree-id462 . -1) 1052) nil (26126 44081 151078 232000) 0 nil])
([nil nil ((1051 . 1066)) nil (26126 44081 151067 399000) 0 nil])
([nil nil ((1066 . 1067)) nil (26126 44081 151061 510000) 0 nil])
([nil nil ((1067 . 1076)) nil (26126 44081 151055 584000) 0 nil])
([nil nil ((#("'" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -1075) (undo-tree-id461 . -1) 1076) nil (26126 44081 151048 158000) 0 nil])
([nil nil ((1075 . 1077)) nil (26126 44081 151037 10000) 0 nil])
([nil nil ((#(";" 0 1 (ws-butler-chg chg fontified t)) . -1075) (undo-tree-id459 . -1) (#("v" 0 1 (ws-butler-chg chg fontified t)) . -1076) (undo-tree-id460 . -1) 1077) nil (26126 44081 151028 973000) 0 nil])
([nil nil ((1075 . 1081)) nil (26126 44081 151012 640000) 0 nil])
([nil nil ((#("'" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -1060) (undo-tree-id458 . -1) 1061) nil (26126 44081 151005 288000) 0 nil])
([nil nil ((#("'" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . 1051)) nil (26126 44081 150993 473000) 0 nil])
([nil nil ((#("'" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -1073) (undo-tree-id457 . -1) 1074) nil (26126 44081 150985 751000) 0 nil])
([nil nil ((#("'" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -1077) (undo-tree-id456 . -1) 1078) nil (26126 44081 150973 455000) 0 nil])
([nil nil ((1077 . 1083)) nil (26126 44081 150962 529000) 0 nil])
([nil nil ((1083 . 1092)) nil (26126 44081 150956 603000) 0 nil])
([nil nil ((1095 . 1097)) nil (26126 44081 150950 788000) 0 nil])
([nil nil ((1096 . 1099)) nil (26126 44081 150945 11000) 0 nil])
([nil nil ((1098 . 1099)) nil (26126 44081 150939 66000) 0 nil])
([nil nil ((1100 . 1106)) nil (26126 44081 150932 937000) 0 nil])
([nil nil ((1105 . 1109)) nil (26126 44081 150926 659000) 0 nil])
([nil nil ((#("&" 0 1 (ws-butler-chg chg fontified t)) . -1106) (undo-tree-id453 . -1) (#("&" 0 1 (ws-butler-chg chg fontified t)) . -1107) (undo-tree-id454 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -1108) (undo-tree-id455 . -1) 1109) nil (26126 44081 150918 159000) 0 nil])
([nil nil ((1106 . 1115)) nil (26126 44081 150899 66000) 0 nil])
([nil nil ((1115 . 1116)) nil (26126 44081 150892 974000) 0 nil])
([nil nil ((#("e" 0 1 (ws-butler-chg chg fontified t)) . -1115) (undo-tree-id452 . -1) 1116) nil (26126 44081 150885 548000) 0 nil])
([nil nil ((1115 . 1136)) nil (26126 44081 150874 585000) 0 nil])
([nil nil ((1136 . 1138)) nil (26126 44081 150868 585000) 0 nil])
([nil nil ((1138 . 1148)) nil (26126 44081 150862 474000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -414) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -415) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -416) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -417) (undo-tree-id450 . -1) (undo-tree-id451 . -1) 418) nil (26126 44081 150852 363000) 0 nil])
([nil nil ((414 . 428)) nil (26126 44081 150817 159000) 0 nil])
([nil nil ((427 . 444)) nil (26126 44081 150811 437000) 0 nil])
([nil nil ((444 . 459)) nil (26126 44081 150805 733000) 0 nil])
([nil nil ((459 . 465)) nil (26126 44081 150799 622000) 0 nil])
([nil nil ((463 . 477)) nil (26126 44081 150793 567000) 0 nil])
([nil nil ((#("w" 0 1 (ws-butler-chg chg fontified t)) . -476) (undo-tree-id443 . -1) 477) nil (26126 44081 150786 548000) 0 nil])
([nil nil ((476 . 480)) nil (26126 44081 150775 511000) 0 nil])
([nil nil ((480 . 481)) nil (26126 44081 150769 474000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -480) (undo-tree-id442 . -1) 481) nil (26126 44081 150761 937000) 0 nil])
([nil nil ((480 . 494)) nil (26126 44081 150750 715000) 0 nil])
([nil nil ((493 . 495)) nil (26126 44081 150744 400000) 0 nil])
([nil nil ((#("w" 0 1 (ws-butler-chg chg fontified t)) . -493) (undo-tree-id440 . -1) (#("r" 0 1 (ws-butler-chg chg fontified t)) . -494) (undo-tree-id441 . -1) 495) nil (26126 44081 150736 215000) 0 nil])
([nil nil ((493 . 494)) nil (26126 44081 150720 678000) 0 nil])
([nil nil ((#(";" 0 1 (ws-butler-chg chg fontified t)) . -493) (undo-tree-id439 . -1) 494) nil (26126 44081 150712 882000) 0 nil])
([nil nil ((493 . 499)) nil (26126 44081 150701 123000) 0 nil])
([nil nil ((#("w" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -494) (undo-tree-id434 . -1) (#("r" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -495) (undo-tree-id435 . -1) (#("o" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -496) (undo-tree-id436 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -497) (undo-tree-id437 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -498) (undo-tree-id438 . -1) 499) nil (26126 44081 150690 752000) 0 nil])
([nil nil ((494 . 509)) nil (26126 44081 150663 790000) 0 nil])
([nil nil ((#(";" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -508) (undo-tree-id433 . -1) 509) nil (26126 44081 150656 141000) 0 nil])
([nil nil ((508 . 519)) nil (26126 44081 150644 827000) 0 nil])
([nil nil ((523 . 524)) nil (26126 44081 150638 808000) 0 nil])
([nil nil ((#("fs.stat(filename, (err, stat) => {
            err?
                fs.writeFile(filename, fields + '\\r\\n', (e) => {
                    e && throw e;
                    console.log('file saved');
                })
                :
        " 0 18 (ws-butler-chg chg fontified t) 18 19 (ws-butler-chg delete fontified t) 19 22 (ws-butler-chg chg fontified t) 22 24 (ws-butler-chg chg fontified t) 24 28 (ws-butler-chg chg fontified t) 28 32 (ws-butler-chg chg fontified t) 32 33 (ws-butler-chg delete fontified t) 33 34 (ws-butler-chg chg fontified t) 34 35 (ws-butler-chg chg fontified t) 35 38 (ws-butler-chg chg fontified t) 38 40 (ws-butler-chg chg fontified t) 40 52 (ws-butler-chg chg fontified t) 52 100 (ws-butler-chg chg fontified t) 100 106 (ws-butler-chg chg fontified t face font-lock-string-face) 106 108 (ws-butler-chg chg fontified t) 108 110 (ws-butler-chg chg fontified t) 110 111 (ws-butler-chg delete fontified t) 111 117 (ws-butler-chg chg fontified t) 117 142 (ws-butler-chg chg fontified t) 142 147 (ws-butler-chg chg fontified t face font-lock-keyword-face) 147 149 (ws-butler-chg chg fontified t) 149 151 (ws-butler-chg chg fontified t) 151 183 (ws-butler-chg chg fontified t) 183 195 (ws-butler-chg chg fontified t face font-lock-string-face) 195 197 (ws-butler-chg chg fontified t) 197 198 (ws-butler-chg delete fontified t) 198 214 (ws-butler-chg chg fontified t) 214 215 (ws-butler-chg delete fontified t) 215 216 (ws-butler-chg delete fontified t) 216 217 (ws-butler-chg delete fontified t) 217 232 (ws-butler-chg chg fontified t) 232 233 (ws-butler-chg chg fontified t) 233 234 (ws-butler-chg delete fontified t) 234 235 (ws-butler-chg chg fontified t) 235 243 (ws-butler-chg chg fontified t)) . -876) (undo-tree-id430 . -243) (undo-tree-id431 . -29) (undo-tree-id432 . -243) 1119) nil (26126 44081 150630 864000) 0 nil])
([nil nil ((#("        " 0 1 (ws-butler-chg delete fontified t) 1 8 (ws-butler-chg chg fontified t)) . -876)) nil (26126 44081 150611 938000) 0 nil])
([nil nil ((1005 . 1006)) nil (26126 44081 150605 864000) 0 nil])
([nil nil ((#("l" 0 1 (ws-butler-chg chg fontified t)) . -1005) (undo-tree-id429 . -1) 1006) nil (26126 44081 150598 31000) 0 nil])
([nil nil ((1005 . 1006)) nil (26126 44081 150585 901000) 0 nil])
([nil nil ((#("    " 0 1 (ws-butler-chg delete fontified t face font-lock-comment-face) 1 4 (ws-butler-chg chg fontified t face font-lock-comment-face)) . 853) (undo-tree-id428 . -4) 1006) nil (26126 44081 150570 753000) 0 nil])
([nil nil ((335 . 336) (t 26126 44081 188133 267000)) nil (26126 44139 19159 747000) 0 nil])
([nil nil ((340 . 341)) nil (26126 44139 19152 692000) 0 nil])
([nil nil ((349 . 350)) nil (26126 44139 19146 340000) 0 nil])
([nil nil ((356 . 357)) nil (26126 44139 19139 840000) 0 nil])
([nil nil ((367 . 368)) nil (26126 44139 19133 136000) 0 nil])
([nil nil ((374 . 375)) nil (26126 44139 19127 155000) 0 nil])
([nil nil ((334 . 343)) nil (26126 44139 19120 562000) 0 nil])
([nil nil ((392 . 395)) nil (26126 44139 19114 340000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -383) (undo-tree-id521 . -1) 384) nil (26126 44139 19106 340000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -376) (undo-tree-id520 . -1) 377) nil (26126 44139 19093 581000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -365) (undo-tree-id519 . -1) 366) nil (26126 44139 19079 822000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -358) (undo-tree-id518 . -1) 359) nil (26126 44139 19066 266000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -349) (undo-tree-id517 . -1) 350) nil (26126 44139 19052 7000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -344) (undo-tree-id516 . -1) 345) nil (26126 44139 19029 674000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . -386) (undo-tree-id523 . -1) 387 (t 26126 44139 51896 612000)) nil (26126 44162 662269 947000) 0 nil])
([nil nil ((387 . 388)) nil (26126 44162 662256 410000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . -342) (undo-tree-id522 . -1) 343) nil (26126 44162 662246 669000) 0 nil])
([nil nil ((334 . 335)) nil (26126 44162 662200 651000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -475) (undo-tree-id528 . -1) (#("r" 0 1 (fontified t)) . -476) (undo-tree-id529 . -1) (#("r" 0 1 (fontified t)) . -477) (undo-tree-id530 . -1) (#(" " 0 1 (fontified t)) . -478) (undo-tree-id531 . -1) (#("&" 0 1 (fontified t)) . -479) (undo-tree-id532 . -1) (#("&" 0 1 (fontified t)) . -480) (undo-tree-id533 . -1) 481 (t 26126 44162 699799 162000)) nil (26126 44224 833244 157000) 0 nil])
([nil nil ((475 . 482)) nil (26126 44224 833209 416000) 0 nil])
([nil nil ((493 . 501)) nil (26126 44224 833203 46000) 0 nil])
([nil nil ((542 . 543)) nil (26126 44224 833197 102000) 0 nil])
([nil nil ((978 . 980)) nil (26126 44224 833190 824000) 0 nil])
([nil nil ((980 . 981)) nil (26126 44224 833184 861000) 0 nil])
([nil nil ((982 . 984)) nil (26126 44224 833178 28000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . -986) (undo-tree-id527 . -1) 987) nil (26126 44224 833122 954000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -984) (undo-tree-id525 . -1) (#("&" 0 1 (fontified t)) . -985) (undo-tree-id526 . -1) 986) nil (26126 44224 833109 435000) 0 nil])
([nil nil ((984 . 986)) nil (26126 44224 833092 398000) 0 nil])
([nil nil ((994 . 998)) nil (26126 44224 833086 121000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg)) . -997) (undo-tree-id524 . -1) 998) nil (26126 44224 833078 84000) 0 nil])
([nil nil ((996 . 997)) nil (26126 44224 833042 991000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t ws-butler-chg delete)) . 998)) nil (26126 44224 833035 769000) 0 nil])
([nil nil ((998 . 1003)) nil (26126 44224 833029 250000) 0 nil])
([nil nil ((1003 . 1005)) nil (26126 44224 833022 213000) 0 nil])
([nil nil ((1035 . 1036)) nil (26126 44224 833004 880000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -971) (undo-tree-id536 . -1) 972 (t 26126 44224 871541 108000)) nil (26126 44254 507106 948000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -1014) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (#("g" 0 1 (fontified t)) . -1015) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (#(" " 0 1 (fontified t)) . -1016) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (#("(" 0 1 (fontified t)) . -1017) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (#("'" 0 1 (fontified t face font-lock-string-face)) . -1018) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (#("w" 0 1 (fontified t face font-lock-string-face)) . -1019) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -1020) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -1021) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -1022) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -1023) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -1024) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -1025) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -1026) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -1027) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -1028) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -1029) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -1030) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -1031) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (#("'" 0 1 (fontified t face font-lock-string-face)) . -1032) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (#(")" 0 1 (fontified t)) . -1033) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (#("}" 0 1 (fontified t)) . -1034) (undo-tree-id903 . -1) 1035) nil (26126 44273 267587 846000) 0 nil] [nil nil ((#("if err { throw err;} else { console.log ('wrote to file')" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 4 (fontified t) 4 8 (fontified t) 8 9 (fontified t) 9 14 (fontified t face font-lock-keyword-face) 14 16 (fontified t) 16 21 (fontified t) 21 25 (fontified t face font-lock-keyword-face) 25 27 (fontified t) 27 28 (fontified t) 28 41 (fontified t) 41 56 (fontified t face font-lock-string-face) 56 57 (fontified t)) . -977) (undo-tree-id534 . -57) (undo-tree-id535 . -57) 1034) ((nil ws-butler-chg delete 1034 . 1035) (977 . 1034)) (26126 44254 506356 414000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -997) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (#("e" 0 1 (fontified t)) . -998) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (#("l" 0 1 (fontified t)) . -999) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (#("s" 0 1 (fontified t)) . -1000) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face)) . -1001) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (#(" " 0 1 (fontified t)) . -1002) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (#("{" 0 1 (fontified t)) . -1003) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (#(" " 0 1 (fontified t)) . -1004) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (#("c" 0 1 (fontified t)) . -1005) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (#("o" 0 1 (fontified t)) . -1006) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (#("n" 0 1 (fontified t)) . -1007) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (#("s" 0 1 (fontified t)) . -1008) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (#("o" 0 1 (fontified t)) . -1009) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (#("l" 0 1 (fontified t)) . -1010) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (#("e" 0 1 (fontified t)) . -1011) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (#("." 0 1 (fontified t)) . -1012) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (#("l" 0 1 (fontified t)) . -1013) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) 1014) nil (26126 44273 267345 310000) 0 nil])
nil
([nil nil ((#("i" 0 1 (fontified t)) . -977) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -978) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (#(" " 0 1 (fontified t)) . -979) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (#("e" 0 1 (fontified t)) . -980) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (#("r" 0 1 (fontified t)) . -981) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (#("r" 0 1 (fontified t)) . -982) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (#(" " 0 1 (fontified t)) . -983) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (#("{" 0 1 (fontified t)) . -984) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (#(" " 0 1 (fontified t)) . -985) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (#("t" 0 1 (fontified t)) . -986) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (#("h" 0 1 (fontified t)) . -987) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (#("r" 0 1 (fontified t)) . -988) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (#("o" 0 1 (fontified t)) . -989) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (#("w" 0 1 (fontified t face font-lock-keyword-face)) . -990) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (#(" " 0 1 (fontified t)) . -991) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (#("e" 0 1 (fontified t)) . -992) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (#("r" 0 1 (fontified t)) . -993) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (#("r" 0 1 (fontified t)) . -994) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (#(";" 0 1 (fontified t)) . -995) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (#("}" 0 1 (fontified t)) . -996) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) 997) nil (26126 44273 267079 848000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -519) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -520) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -521) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -522) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -523) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -524) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -525) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -526) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (#(":" 0 1 (fontified t face font-lock-string-face)) . -527) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -528) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (#("'" 0 1 (fontified t face font-lock-string-face)) . -529) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (#("," 0 1 (fontified t)) . -530) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (#(" " 0 1 (fontified t)) . -531) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (#("f" 0 1 (fontified t)) . -532) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (#("i" 0 1 (fontified t)) . -533) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (#("l" 0 1 (fontified t)) . -534) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (#("e" 0 1 (fontified t)) . -535) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (#("n" 0 1 (fontified t)) . -536) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (#("a" 0 1 (fontified t)) . -537) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (#("m" 0 1 (fontified t)) . -538) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (#("e" 0 1 (fontified t)) . -539) (undo-tree-id731 . -1) 540) nil (26126 44273 266839 349000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t face font-lock-string-face)) . -514) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -515) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -516) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -517) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -518) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) 519) nil (26126 44273 266605 832000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -501) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (#("c" 0 1 (fontified t)) . -502) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (#("o" 0 1 (fontified t)) . -503) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (#("n" 0 1 (fontified t)) . -504) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (#("s" 0 1 (fontified t)) . -505) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (#("o" 0 1 (fontified t)) . -506) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (#("l" 0 1 (fontified t)) . -507) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (#("e" 0 1 (fontified t)) . -508) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (#("." 0 1 (fontified t)) . -509) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (#("l" 0 1 (fontified t)) . -510) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (#("o" 0 1 (fontified t)) . -511) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (#("g" 0 1 (fontified t)) . -512) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (#("(" 0 1 (fontified t)) . -513) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (#(")" 0 1 (fontified t ws-butler-chg delete)) . -514) (undo-tree-id655 . -1) 515) nil (26126 44273 266532 388000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . -481) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (#(" " 0 1 (fontified t)) . -482) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (#("t" 0 1 (fontified t)) . -483) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (#("h" 0 1 (fontified t)) . -484) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (#("r" 0 1 (fontified t)) . -485) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (#("o" 0 1 (fontified t)) . -486) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (#("w" 0 1 (fontified t face font-lock-keyword-face)) . -487) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (#(" " 0 1 (fontified t)) . -488) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (#("e" 0 1 (fontified t)) . -489) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (#("r" 0 1 (fontified t)) . -490) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (#("r" 0 1 (fontified t)) . -491) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (#(";" 0 1 (fontified t)) . -492) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (#("}" 0 1 (fontified t)) . -493) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (#(" " 0 1 (fontified t)) . -494) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (#("e" 0 1 (fontified t)) . -495) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (#("l" 0 1 (fontified t)) . -496) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (#("s" 0 1 (fontified t)) . -497) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face)) . -498) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (#(" " 0 1 (fontified t)) . -499) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (#("{" 0 1 (fontified t)) . -500) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (#("}" 0 1 (fontified t ws-butler-chg delete)) . -501) (undo-tree-id615 . -1) 502) nil (26126 44273 266358 648000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -475) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -476) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (#(" " 0 1 (fontified t)) . -477) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (#("e" 0 1 (fontified t)) . -478) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (#("r" 0 1 (fontified t)) . -479) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (#("r" 0 1 (fontified t)) . -480) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) 481) nil (26126 44273 266065 686000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -467) (undo-tree-id904 . -1) (#("r" 0 1 (fontified t)) . -468) (undo-tree-id905 . -1) (#("r" 0 1 (fontified t)) . -469) (undo-tree-id906 . -1) 470 (t 26126 44273 303338 381000)) nil (26126 44283 700114 942000) 0 nil])
([nil nil ((467 . 468)) nil (26126 44283 700068 220000) 0 nil])
([nil nil ((902 . 903)) nil (26126 44283 700049 812000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . -966) (undo-tree-id944 . -1) 967 (t 26126 44283 739294 518000)) nil (26126 44350 225603 110000) 0 nil])
([nil nil ((966 . 967)) nil (26126 44350 225591 202000) 0 nil])
([nil nil ((#("fs.appendFile(filename, csv([{DateTime: new Date(), Vote: req.body.vote}]), (_) => {});" 0 1 (fontified t) 1 6 (fontified t) 6 30 (fontified t) 30 31 (fontified t) 31 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 43 (fontified t face font-lock-keyword-face) 43 44 (fontified t) 44 48 (fontified t face font-lock-type-face) 48 52 (fontified t) 52 53 (fontified t) 53 71 (fontified t) 71 72 (fontified t) 72 73 (fontified t) 73 74 (fontified t) 74 77 (fontified t) 77 78 (fontified t) 78 79 (fontified t) 79 84 (fontified t) 84 85 (fontified t) 85 87 (fontified t)) . 825) (undo-tree-id942 . -87) (undo-tree-id943 . -87) 912) nil (26126 44350 225583 258000) 0 nil])
([nil nil ((806 . 811)) nil (26126 44350 225567 702000) 0 nil])
([nil nil ((nil rear-nonsticky nil 897 . 898) (nil fontified nil 896 . 898) (nil fontified nil 895 . 896) (nil fontified nil 890 . 895) (nil fontified nil 889 . 890) (nil fontified nil 888 . 889) (nil fontified nil 885 . 888) (nil fontified nil 884 . 885) (nil fontified nil 883 . 884) (nil fontified nil 882 . 883) (nil fontified nil 864 . 882) (nil fontified nil 863 . 864) (nil fontified nil 859 . 863) (nil fontified nil 855 . 859) (nil fontified nil 854 . 855) (nil fontified nil 851 . 854) (nil fontified nil 850 . 851) (nil fontified nil 849 . 850) (nil fontified nil 842 . 849) (nil fontified nil 841 . 842) (nil fontified nil 817 . 841) (nil fontified nil 812 . 817) (nil fontified nil 811 . 812) (811 . 898)) nil (26126 44350 225557 202000) 0 nil])
([nil nil ((#("try {
        
        });
        res.send('Vote Logged');
        } catch (error) {
            console.error('Error writing to file: ', error);
            res.status(500).send('Could Not Write To File');
    " 0 3 (fontified t face font-lock-keyword-face) 3 6 (fontified t) 6 14 (fontified t) 14 15 (ws-butler-chg delete fontified t) 15 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (rear-nonsticky t fontified t) 26 27 (fontified t) 27 31 (fontified t) 31 35 (fontified t) 35 37 (fontified t) 37 44 (fontified t) 44 45 (fontified t face font-lock-string-face) 45 56 (fontified t face font-lock-string-face) 56 57 (fontified t face font-lock-string-face) 57 58 (fontified t) 58 59 (rear-nonsticky t fontified t) 59 60 (fontified t) 60 64 (fontified t) 64 68 (fontified t) 68 69 (ws-butler-chg chg fontified t) 69 70 (ws-butler-chg delete fontified t) 70 75 (fontified t face font-lock-keyword-face) 75 80 (fontified t) 80 81 (fontified t) 81 86 (fontified t) 86 112 (fontified t) 112 113 (fontified t face font-lock-string-face) 113 117 (fontified t face font-lock-string-face) 117 118 (fontified t face font-lock-string-face) 118 127 (fontified t face font-lock-string-face) 127 136 (fontified t face font-lock-string-face) 136 137 (fontified t face font-lock-string-face) 137 146 (fontified t) 146 147 (fontified t) 147 168 (fontified t) 168 171 (fontified t) 171 179 (fontified t) 179 180 (fontified t) 180 181 (fontified t face font-lock-string-face) 181 184 (fontified t face font-lock-string-face) 184 185 (fontified t face font-lock-string-face) 185 186 (fontified t face font-lock-string-face) 186 187 (fontified t face font-lock-string-face) 187 204 (fontified t face font-lock-string-face) 204 205 (fontified t face font-lock-string-face) 205 207 (fontified t) 207 208 (fontified t) 208 212 (fontified t)) . 903) (undo-tree-id935 . -212) (undo-tree-id936 . -35) (undo-tree-id937 . -6) (undo-tree-id938 . -14) (undo-tree-id939 . -212) (undo-tree-id940 . -208) (undo-tree-id941 . -212) 1115) nil (26126 44350 225531 962000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -904) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (#(" " 0 1 (fontified t)) . -905) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (#(" " 0 1 (fontified t)) . -906) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (#("}" 0 1 (fontified t)) . -907) (undo-tree-id934 . -1) 908) nil (26126 44350 225494 369000) 0 nil])
([nil nil ((#("     " 0 4 (fontified t) 4 5 (fontified t ws-butler-chg delete)) . 899) (undo-tree-id907 . -5) (undo-tree-id908 . -4) (undo-tree-id909 . -5) (undo-tree-id910 . -5) (undo-tree-id911 . -4) (undo-tree-id912 . -4) (undo-tree-id913 . -4) (undo-tree-id914 . -4) (undo-tree-id915 . -4) (undo-tree-id916 . -4) (undo-tree-id917 . -5) (undo-tree-id918 . -5) 904) nil (26126 44350 225260 278000) 0 nil])
([nil nil ((899 . 904) 904 (t 26126 44350 267013 508000)) nil (26126 44361 636011 575000) 0 nil])
([nil nil ((#("//let vote = req.body.vote + \";\";
    //fs.writeFile('votes.log', vote, {'flag':'a'}, (err) => {err && console.error(err)} );" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 2 (fontified t face font-lock-comment-delimiter-face) 2 5 (fontified t face font-lock-comment-face) 5 6 (fontified t face font-lock-comment-face) 6 10 (fontified t face font-lock-comment-face) 10 29 (fontified t face font-lock-comment-face) 29 32 (fontified t face font-lock-comment-face) 32 34 (fontified t face font-lock-comment-face) 34 38 (fontified t) 38 39 (fontified t face font-lock-comment-delimiter-face) 39 40 (fontified t face font-lock-comment-delimiter-face) 40 53 (fontified t face font-lock-comment-face) 53 54 (fontified t face font-lock-comment-face) 54 63 (fontified t face font-lock-comment-face) 63 64 (fontified t face font-lock-comment-face) 64 73 (fontified t face font-lock-comment-face) 73 74 (fontified t face font-lock-comment-face) 74 78 (fontified t face font-lock-comment-face) 78 79 (fontified t face font-lock-comment-face) 79 80 (fontified t face font-lock-comment-face) 80 81 (fontified t face font-lock-comment-face) 81 82 (fontified t face font-lock-comment-face) 82 83 (fontified t face font-lock-comment-face) 83 125 (fontified t face font-lock-comment-face)) . -681) (undo-tree-id946 . -125) (undo-tree-id947 . -125) (undo-tree-id948 . -125) 806 (t 26126 44350 267013 508000)) nil (26126 44361 636000 556000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -676) (undo-tree-id945 . -1) 677) nil (26126 44361 636314 73000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg delete)) . -676) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (#(" " 0 1 (fontified t)) . -677) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (#(" " 0 1 (fontified t)) . -678) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (#(" " 0 1 (fontified t)) . -679) (undo-tree-id960 . -1) (undo-tree-id961 . -1) 680) nil (26126 44371 638364 630000) 0 nil] [nil nil ((676 . 677)) ((#("
" 0 1 (fontified t ws-butler-chg chg)) . 676) (undo-tree-id949 . -1)) (26126 44361 635928 927000) 0 nil])
([nil nil ((#("
     " 0 1 (fontified t) 1 6 (ws-butler-chg chg fontified t)) . 768) (undo-tree-id950 . -6) (undo-tree-id951 . -1) (undo-tree-id952 . -6) (undo-tree-id953 . -6)) nil (26126 44371 638319 667000) 0 nil])
nil
([nil nil ((676 . 681) (t 26126 44371 674922 604000)) nil (26126 44553 560063 185000) 0 nil])
([nil nil ((681 . 685)) nil (26126 44553 560056 111000) 0 nil])
([nil nil ((782 . 790) (686 . 694) (#("    " 0 4 (fontified nil)) . 686) (undo-tree-id1001 . -4) (777 . 778)) nil (26126 44553 560048 481000) 0 nil])
([nil nil ((787 . 796) (#("    " 0 4 (fontified nil ws-butler-chg chg)) . -786) (undo-tree-id1000 . -4) (790 . 791)) nil (26126 44553 560034 92000) 0 nil])
([nil nil ((#("9" 0 1 (fontified t ws-butler-chg chg)) . -794) (undo-tree-id998 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -795) (undo-tree-id999 . -1) 796) nil (26126 44553 560020 166000) 0 nil])
([nil nil ((794 . 802)) nil (26126 44553 559998 370000) 0 nil])
([nil nil ((801 . 806)) nil (26126 44553 559992 111000) 0 nil])
([nil nil ((803 . 807) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . 802) (802 . 810) (802 . 803) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 802) (undo-tree-id997 . -4) 806) nil (26126 44553 559984 0) 0 nil])
([nil nil ((802 . 810)) nil (26126 44553 559970 333000) 0 nil])
([nil nil ((810 . 819)) nil (26126 44553 559964 315000) 0 nil])
([nil nil ((818 . 823)) nil (26126 44553 559958 389000) 0 nil])
([nil nil ((823 . 824)) nil (26126 44553 559952 278000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t ws-butler-chg chg)) . -822) (undo-tree-id995 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -823) (undo-tree-id996 . -1) 824) nil (26126 44553 559944 389000) 0 nil])
([nil nil ((822 . 828)) nil (26126 44553 559929 148000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t ws-butler-chg chg)) . -810) (undo-tree-id976 . -1) (#("f" 0 1 (fontified t ws-butler-chg chg face font-lock-keyword-face)) . -811) (undo-tree-id977 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -812) (undo-tree-id978 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -813) (undo-tree-id979 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -814) (undo-tree-id980 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -815) (undo-tree-id981 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -816) (undo-tree-id982 . -1) (#("{" 0 1 (fontified t ws-butler-chg chg)) . -817) (undo-tree-id983 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -818) (undo-tree-id984 . -1) (#("h" 0 1 (fontified t ws-butler-chg chg)) . -819) (undo-tree-id985 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -820) (undo-tree-id986 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -821) (undo-tree-id987 . -1) (#("w" 0 1 (fontified t ws-butler-chg chg face font-lock-keyword-face)) . -822) (undo-tree-id988 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -823) (undo-tree-id989 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -824) (undo-tree-id990 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -825) (undo-tree-id991 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -826) (undo-tree-id992 . -1) (#(";" 0 1 (fontified t ws-butler-chg chg)) . -827) (undo-tree-id993 . -1) (#("}" 0 1 (fontified t ws-butler-chg delete)) . -828) (undo-tree-id994 . -1) 829) nil (26126 44553 559909 56000) 0 nil])
([nil nil ((810 . 819)) nil (26126 44553 559826 371000) 0 nil])
([nil nil ((819 . 820)) nil (26126 44553 559820 315000) 0 nil])
([nil nil ((820 . 829)) nil (26126 44553 559814 575000) 0 nil])
([nil nil ((829 . 846)) nil (26126 44553 559808 686000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -844) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -845) (undo-tree-id974 . -1) (undo-tree-id975 . -1) 846) nil (26126 44553 559800 19000) 0 nil])
([nil nil ((844 . 865)) nil (26126 44553 559777 982000) 0 nil])
([nil nil ((865 . 868)) nil (26126 44553 559772 130000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -867) (undo-tree-id970 . -1) (undo-tree-id971 . -1) 868) nil (26126 44553 559764 427000) 0 nil])
([nil nil ((867 . 880)) nil (26126 44553 559735 556000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -879) (undo-tree-id968 . -1) (undo-tree-id969 . -1) 880) nil (26126 44553 559727 834000) 0 nil])
([nil nil ((879 . 881)) nil (26126 44553 559713 316000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -880) (undo-tree-id966 . -1) (undo-tree-id967 . -1) 881) nil (26126 44553 559705 779000) 0 nil])
([nil nil ((880 . 883)) nil (26126 44553 559691 75000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -881) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (#(":" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -882) (undo-tree-id964 . -1) (undo-tree-id965 . -1) 883) nil (26126 44553 559681 279000) 0 nil])
([nil nil ((881 . 882)) nil (26126 44553 559633 927000) 0 nil])
([nil nil ((882 . 891)) nil (26126 44553 559627 723000) 0 nil])
([nil nil ((883 . 885)) nil (26126 44553 559621 20000) 0 nil])
([nil nil ((893 . 895)) nil (26126 44553 559603 205000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -134) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (#("|" 0 1 (fontified t)) . -135) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (#("|" 0 1 (fontified t)) . -136) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (#(" " 0 1 (fontified t)) . -137) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (#("1" 0 1 (fontified t)) . -138) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (#("3" 0 1 (fontified t)) . -139) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (#("3" 0 1 (fontified t)) . -140) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (#("7" 0 1 (fontified t)) . -141) (undo-tree-id1023 . -1) 142 (t 26126 44553 598142 205000)) nil (26126 44978 829198 312000) 0 nil])
([nil nil ((161 . 162) (t 26126 44978 868280 324000)) nil (26126 45108 105259 885000) 0 nil])
([nil nil ((162 . 183)) nil (26126 45108 105252 551000) 0 nil])
([nil nil ((183 . 194)) nil (26126 45108 105246 144000) 0 nil])
([nil nil ((194 . 204)) nil (26126 45108 105239 292000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -266) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (#("r" 0 1 (fontified t)) . -267) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (#("o" 0 1 (fontified t)) . -268) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (#("c" 0 1 (fontified t)) . -269) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (#("e" 0 1 (fontified t)) . -270) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (#("s" 0 1 (fontified t)) . -271) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (#("s" 0 1 (fontified t)) . -272) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (#("." 0 1 (fontified t)) . -273) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (#("e" 0 1 (fontified t)) . -274) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (#("n" 0 1 (fontified t)) . -275) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (#("v" 0 1 (fontified t)) . -276) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (#("." 0 1 (fontified t)) . -277) (undo-tree-id1057 . -1) 278) nil (26126 45108 105212 70000) 0 nil])
([nil nil ((#("." 0 1 (fontified t ws-butler-chg delete)) . 111) (#("v" 0 1 (fontified t ws-butler-chg delete)) . 111) (#("n" 0 1 (fontified t ws-butler-chg delete)) . 111) (#("e" 0 1 (fontified t ws-butler-chg delete)) . 111) (#("." 0 1 (fontified t ws-butler-chg delete)) . 111) (#("s" 0 1 (fontified t ws-butler-chg delete)) . 111) (#("s" 0 1 (fontified t ws-butler-chg delete)) . 111) (#("e" 0 1 (fontified t ws-butler-chg delete)) . 111) (#("c" 0 1 (fontified t ws-butler-chg delete)) . 111) (#("o" 0 1 (fontified t ws-butler-chg delete)) . 111) (#("r" 0 1 (fontified t ws-butler-chg delete)) . 111) (#("p" 0 1 (fontified t)) . 111) (t 26126 45108 143707 899000)) nil (26126 45120 570053 325000) 0 nil])
([nil nil ((190 . 192) (t 26126 45120 611652 585000)) nil (26126 45272 603791 702000) 0 nil])
([nil nil ((191 . 194)) nil (26126 45272 603785 35000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t ws-butler-chg chg)) . -191) (undo-tree-id1058 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg)) . -192) (undo-tree-id1059 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -193) (undo-tree-id1060 . -1) 194) nil (26126 45272 603775 350000) 0 nil])
([nil nil ((191 . 195)) nil (26126 45272 603729 776000) 0 nil])
([nil nil ((195 . 204)) nil (26126 45272 603723 461000) 0 nil])
([nil nil ((199 . 200)) nil (26126 45272 603716 239000) 0 nil])
([nil nil ((201 . 207)) nil (26126 45272 603698 535000) 0 nil])
([nil nil ((111 . 122) (t 26126 45272 650976 806000)) nil (26126 45312 899151 796000) 0 nil])
([nil nil ((287 . 299)) nil (26126 45312 899143 463000) 0 nil])
([nil nil ((122 . 123)) nil (26126 45312 899125 703000) 0 nil])
([nil nil ((#("const dotenv = require('dotenv').config({path: '.,/local.env'});" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 12 (fontified t face font-lock-variable-name-face) 12 23 (fontified t) 23 31 (fontified t face font-lock-string-face) 31 40 (fontified t) 40 47 (fontified t) 47 50 (fontified t face font-lock-string-face) 50 51 (syntax-table (7 . 47) fontified t face font-lock-string-face) 51 61 (fontified t face font-lock-string-face) 61 62 (fontified t) 62 64 (fontified t)) . 162) (undo-tree-id1061 . -64) (undo-tree-id1062 . -64) 226 (t 26126 45312 938797 397000)) nil (26126 45364 242230 777000) 0 nil])
([nil nil ((1 . 2)) nil (26126 45364 242190 962000) 0 nil])
([nil nil ((nil rear-nonsticky nil 64 . 65) (nil fontified nil 63 . 65) (nil fontified nil 62 . 63) (nil fontified nil 52 . 62) (nil fontified nil 51 . 52) (nil fontified nil 48 . 51) (nil fontified nil 41 . 48) (nil fontified nil 32 . 41) (nil fontified nil 24 . 32) (nil fontified nil 13 . 24) (nil fontified nil 7 . 13) (nil fontified nil 6 . 7) (nil fontified nil 1 . 6) (1 . 65)) nil (26126 45364 242170 462000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -42) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (#("a" 0 1 (fontified t)) . -43) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (#("t" 0 1 (fontified t)) . -44) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (#("h" 0 1 (fontified t)) . -45) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (#(":" 0 1 (fontified t)) . -46) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (#(" " 0 1 (fontified t)) . -47) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (#("'" 0 1 (fontified t face font-lock-string-face)) . -48) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (#("." 0 1 (fontified t face font-lock-string-face)) . -49) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (#("," 0 1 (fontified t face font-lock-string-face)) . -50) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (#("/" 0 1 (fontified t syntax-table (7 . 47) face font-lock-string-face)) . -51) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -52) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -53) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -54) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -55) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -56) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (#("." 0 1 (fontified t face font-lock-string-face)) . -57) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -58) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -59) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (#("v" 0 1 (fontified t face font-lock-string-face)) . -60) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (#("'" 0 1 (fontified t face font-lock-string-face)) . -61) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (#("}" 0 1 (fontified t)) . -62) (undo-tree-id1126 . -1) 63 (t 26126 45364 282568 579000)) nil (26126 45397 148064 447000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . -41) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) 42) nil (26126 45397 147699 967000) 0 nil])
([nil nil ((817 . 826) (t 26126 45397 190429 911000)) nil (26126 46315 124827 616000) 0 nil])
([nil nil ((826 . 831)) nil (26126 46315 124817 746000) 0 nil])
([nil nil ((831 . 839)) nil (26126 46315 124808 746000) 0 nil])
([nil nil ((205 . 226)) nil (26126 46315 124799 931000) 0 nil])
([nil nil ((226 . 228)) nil (26126 46315 124791 209000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -218) (undo-tree-id1128 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -219) (undo-tree-id1129 . -1) (#("=" 0 1 (fontified t ws-butler-chg chg)) . -220) (undo-tree-id1130 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -221) (undo-tree-id1131 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -222) (undo-tree-id1132 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -223) (undo-tree-id1133 . -1) (#("q" 0 1 (fontified t ws-butler-chg chg)) . -224) (undo-tree-id1134 . -1) (#("u" 0 1 (fontified t ws-butler-chg chg)) . -225) (undo-tree-id1135 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -226) (undo-tree-id1136 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -227) (undo-tree-id1137 . -1) 228) nil (26126 46315 124770 598000) 0 nil])
([nil nil ((218 . 226)) nil (26126 46315 124698 561000) 0 nil])
([nil nil ((226 . 242)) nil (26126 46315 124689 117000) 0 nil])
([nil nil ((242 . 243)) nil (26126 46315 124680 154000) 0 nil])
([nil nil ((243 . 264)) nil (26126 46315 124671 191000) 0 nil])
([nil nil ((264 . 266)) nil (26126 46315 124661 617000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t ws-butler-chg chg)) . -265) (undo-tree-id1127 . -1) 266) nil (26126 46315 124648 376000) 0 nil])
([nil nil ((265 . 266)) nil (26126 46315 124587 192000) 0 nil])
([nil nil ((440 . 444) (t 26126 46315 170604 530000)) nil (26126 46376 457520 330000) 0 nil])
([nil nil ((440 . 448) (#("json" 0 4 (fontified t ws-butler-chg chg)) . -440) (undo-tree-id1152 . -4) 444) nil (26126 46376 457511 812000) 0 nil])
([nil nil ((448 . 449)) nil (26126 46376 457499 849000) 0 nil])
([nil nil ((492 . 493)) nil (26126 46376 457493 645000) 0 nil])
([nil nil ((493 . 495)) nil (26126 46376 457487 515000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t ws-butler-chg chg)) . -494) (undo-tree-id1151 . -1) 495) nil (26126 46376 457479 552000) 0 nil])
([nil nil ((494 . 503)) nil (26126 46376 457467 330000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t ws-butler-chg chg face font-lock-keyword-face)) . -498) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (#("L" 0 1 (fontified t ws-butler-chg chg)) . -499) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg)) . -500) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -501) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -502) (undo-tree-id1150 . -1) 503) nil (26126 46376 457452 127000) 0 nil])
([nil nil ((498 . 503)) nil (26126 46376 457331 590000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -574) (undo-tree-id1157 . -1) (#("'" 0 1 (fontified t face font-lock-string-face)) . -575) (undo-tree-id1158 . -1) (#("\\" 0 1 (fontified t face font-lock-string-face)) . -576) (undo-tree-id1159 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -577) (undo-tree-id1160 . -1) (#("\\" 0 1 (fontified t face font-lock-string-face)) . -578) (undo-tree-id1161 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -579) (undo-tree-id1162 . -1) (#("'" 0 1 (fontified t face font-lock-string-face)) . -580) (undo-tree-id1163 . -1) 581 (t 26126 46376 498339 598000)) nil (26126 46392 219971 55000) 0 nil])
([nil nil ((574 . 576)) nil (26126 46392 219935 389000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t ws-butler-chg chg)) . -574) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -575) (undo-tree-id1156 . -1) 576) nil (26126 46392 219925 167000) 0 nil])
([nil nil ((574 . 582)) nil (26126 46392 219866 574000) 0 nil])
([nil nil ((241 . 247) (t 26126 46392 262271 409000)) nil (26126 46481 957251 131000) 0 nil])
([nil nil ((#("fs.appendFile" 0 13 (fontified t)) . -914) (undo-tree-id1204 . -13) (undo-tree-id1205 . -13) 927 (t 26126 46482 1882 604000)) nil (26126 46540 482393 458000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -905) (undo-tree-id1203 . -1) 906) nil (26126 46540 482375 291000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg delete)) . -905) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (#(" " 0 1 (fontified t)) . -906) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (#(" " 0 1 (fontified t)) . -907) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (#(" " 0 1 (fontified t)) . -908) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (#(" " 0 1 (fontified t)) . -909) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (#(" " 0 1 (fontified t)) . -910) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (#(" " 0 1 (fontified t)) . -911) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (#(" " 0 1 (fontified t)) . -912) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) 913) nil (26126 46540 482344 995000) 0 nil])
([nil nil ((497 . 499) (t 26126 46540 549628 425000)) nil (26126 46990 502121 751000) 0 nil])
([nil nil ((#("," 0 1 (fontified t ws-butler-chg chg)) . -497) (undo-tree-id1207 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -498) (undo-tree-id1208 . -1) 499) nil (26126 46990 502111 880000) 0 nil])
([nil nil ((497 . 513)) nil (26126 46990 502041 973000) 0 nil])
([nil nil ((513 . 519)) nil (26126 46990 502035 436000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t ws-butler-chg chg)) . -518) (undo-tree-id1206 . -1) 519) nil (26126 46990 502025 955000) 0 nil])
([nil nil ((518 . 523)) nil (26126 46990 501977 122000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t)) . -505) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (#("o" 0 1 (fontified t)) . -506) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (#("l" 0 1 (fontified t)) . -507) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (#("u" 0 1 (fontified t)) . -508) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (#("m" 0 1 (fontified t)) . -509) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (#("n" 0 1 (fontified t)) . -510) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (#("T" 0 1 (fontified t)) . -511) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (#("i" 0 1 (fontified t)) . -512) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (#("t" 0 1 (fontified t)) . -513) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (#("l" 0 1 (fontified t)) . -514) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (#("e" 0 1 (fontified t)) . -515) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (#(":" 0 1 (fontified t)) . -516) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (#(" " 0 1 (fontified t)) . -517) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (#("f" 0 1 (fontified t)) . -518) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (#("a" 0 1 (fontified t)) . -519) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (#("l" 0 1 (fontified t)) . -520) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (#("s" 0 1 (fontified t)) . -521) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -522) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) 523 (t 26126 46990 543665 402000)) nil (26126 47171 953937 862000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -497) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (#(" " 0 1 (fontified t)) . -498) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (#("h" 0 1 (fontified t)) . -499) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (#("a" 0 1 (fontified t)) . -500) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (#("s" 0 1 (fontified t)) . -501) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (#("C" 0 1 (fontified t)) . -502) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (#("S" 0 1 (fontified t)) . -503) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (#("V" 0 1 (fontified t)) . -504) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) 505) nil (26126 47171 953716 715000) 0 nil])
([nil nil ((809 . 818) (t 26126 47172 6870 759000)) nil (26126 47875 817467 981000) 0 nil])
([nil nil ((818 . 831)) nil (26126 47875 817460 537000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -830) (undo-tree-id1481 . -1) 831) nil (26126 47875 817453 333000) 0 nil])
([nil nil ((830 . 834)) nil (26126 47875 817442 500000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t ws-butler-chg delete)) . 417) (#("e" 0 1 (fontified t ws-butler-chg delete)) . 417) (#("l" 0 1 (fontified t face font-lock-keyword-face)) . 417)) nil (26126 47875 817435 389000) 0 nil])
([nil nil ((417 . 422)) nil (26126 47875 817427 482000) 0 nil])
([nil nil ((440 . 445)) nil (26126 47875 817421 445000) 0 nil])
([nil nil ((442 . 446) (#("    " 0 4 (fontified nil ws-butler-chg chg)) . 441) (441 . 445) (441 . 442) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 441) (undo-tree-id1480 . -4) 445) nil (26126 47875 817412 945000) 0 nil])
([nil nil ((518 . 519)) nil (26126 47875 817398 500000) 0 nil])
([nil nil ((441 . 445)) nil (26126 47875 817392 593000) 0 nil])
([nil nil ((#("return (json2csv({data: data, fields: fields, header: false}) + newline)" 0 1 (ws-butler-chg delete fontified t face font-lock-keyword-face) 1 6 (fontified t face font-lock-keyword-face) 6 8 (fontified t) 8 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 22 (fontified t) 22 23 (fontified t) 23 30 (fontified t) 30 31 (fontified t) 31 36 (fontified t) 36 37 (fontified t) 37 44 (fontified t) 44 45 (fontified t) 45 46 (fontified t) 46 47 (fontified t) 47 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t) 54 59 (fontified t face font-lock-constant-face) 59 60 (fontified t) 60 64 (fontified t) 64 71 (fontified t) 71 72 (fontified t)) . -450) (undo-tree-id1472 . -59) (undo-tree-id1473 . -59) (undo-tree-id1474 . -19) (undo-tree-id1475 . -19) (undo-tree-id1476 . -19) (undo-tree-id1477 . -19) (undo-tree-id1478 . -72) (undo-tree-id1479 . -72) 522) nil (26126 47875 817384 260000) 0 nil])
([nil nil ((440 . 445)) nil (26126 47875 817351 56000) 0 nil])
([nil nil ((445 . 462)) nil (26126 47875 817344 871000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t ws-butler-chg chg)) . -461) (undo-tree-id1471 . -1) 462) nil (26126 47875 817337 575000) 0 nil])
([nil nil ((461 . 465)) nil (26126 47875 817325 334000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t ws-butler-chg chg)) . -453) (undo-tree-id1459 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -454) (undo-tree-id1460 . -1) (#("w" 0 1 (fontified t ws-butler-chg chg face font-lock-keyword-face)) . -455) (undo-tree-id1461 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -456) (undo-tree-id1462 . -1) (#("D" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -457) (undo-tree-id1463 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -458) (undo-tree-id1464 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -459) (undo-tree-id1465 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -460) (undo-tree-id1466 . -1) (#("(" 0 1 (fontified t ws-butler-chg chg)) . -461) (undo-tree-id1467 . -1) (#(")" 0 1 (fontified t ws-butler-chg chg)) . -462) (undo-tree-id1468 . -1) (#("," 0 1 (fontified t ws-butler-chg chg)) . -463) (undo-tree-id1469 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -464) (undo-tree-id1470 . -1) 465) nil (26126 47875 817311 297000) 0 nil])
([nil nil ((453 . 455)) nil (26126 47875 817256 205000) 0 nil])
([nil nil ((454 . 470)) nil (26126 47875 817250 501000) 0 nil])
([nil nil ((471 . 477)) nil (26126 47875 817244 649000) 0 nil])
([nil nil ((477 . 480)) nil (26126 47875 817238 686000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . -485) (undo-tree-id1458 . -1) 486) nil (26126 47875 817231 297000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . -480) (undo-tree-id1457 . -1) 481) nil (26126 47875 817218 686000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg delete fontified t)) . -480) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -481) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -482) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -483) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (#(" " 0 1 (ws-butler-chg delete fontified t)) . -484) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -485) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -486) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -487) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) 488) nil (26126 47875 817193 835000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -864) (undo-tree-id1372 . -1) (#(" " 0 1 (fontified t)) . -865) (undo-tree-id1373 . -1) (#("V" 0 1 (fontified t)) . -866) (undo-tree-id1374 . -1) (#("o" 0 1 (fontified t)) . -867) (undo-tree-id1375 . -1) (#("t" 0 1 (fontified t)) . -868) (undo-tree-id1376 . -1) (#("e" 0 1 (fontified t)) . -869) (undo-tree-id1377 . -1) (#(":" 0 1 (fontified t)) . -870) (undo-tree-id1378 . -1) (#(" " 0 1 (fontified t)) . -871) (undo-tree-id1379 . -1) (#("r" 0 1 (fontified t)) . -872) (undo-tree-id1380 . -1) (#("e" 0 1 (fontified t)) . -873) (undo-tree-id1381 . -1) (#("q" 0 1 (fontified t)) . -874) (undo-tree-id1382 . -1) (#("." 0 1 (fontified t)) . -875) (undo-tree-id1383 . -1) (#("b" 0 1 (fontified t)) . -876) (undo-tree-id1384 . -1) (#("o" 0 1 (fontified t)) . -877) (undo-tree-id1385 . -1) (#("d" 0 1 (fontified t)) . -878) (undo-tree-id1386 . -1) (#("y" 0 1 (fontified t)) . -879) (undo-tree-id1387 . -1) (#("." 0 1 (fontified t)) . -880) (undo-tree-id1388 . -1) (#("v" 0 1 (fontified t)) . -881) (undo-tree-id1389 . -1) (#("o" 0 1 (fontified t)) . -882) (undo-tree-id1390 . -1) (#("t" 0 1 (fontified t)) . -883) (undo-tree-id1391 . -1) (#("e" 0 1 (fontified t)) . -884) (undo-tree-id1392 . -1) 885) nil (26126 47875 816915 855000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . -843) (undo-tree-id1351 . -1) (#("D" 0 1 (fontified t)) . -844) (undo-tree-id1352 . -1) (#("a" 0 1 (fontified t)) . -845) (undo-tree-id1353 . -1) (#("t" 0 1 (fontified t)) . -846) (undo-tree-id1354 . -1) (#("e" 0 1 (fontified t)) . -847) (undo-tree-id1355 . -1) (#("T" 0 1 (fontified t)) . -848) (undo-tree-id1356 . -1) (#("i" 0 1 (fontified t)) . -849) (undo-tree-id1357 . -1) (#("m" 0 1 (fontified t)) . -850) (undo-tree-id1358 . -1) (#("e" 0 1 (fontified t)) . -851) (undo-tree-id1359 . -1) (#(":" 0 1 (fontified t)) . -852) (undo-tree-id1360 . -1) (#(" " 0 1 (fontified t)) . -853) (undo-tree-id1361 . -1) (#("n" 0 1 (fontified t)) . -854) (undo-tree-id1362 . -1) (#("e" 0 1 (fontified t)) . -855) (undo-tree-id1363 . -1) (#("w" 0 1 (fontified t face font-lock-keyword-face)) . -856) (undo-tree-id1364 . -1) (#(" " 0 1 (fontified t)) . -857) (undo-tree-id1365 . -1) (#("D" 0 1 (fontified t face font-lock-type-face)) . -858) (undo-tree-id1366 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -859) (undo-tree-id1367 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -860) (undo-tree-id1368 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -861) (undo-tree-id1369 . -1) (#("(" 0 1 (fontified t)) . -862) (undo-tree-id1370 . -1) (#(")" 0 1 (fontified t)) . -863) (undo-tree-id1371 . -1) 864) nil (26126 47875 816811 596000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -842) (undo-tree-id1350 . -1) 843) nil (26126 47875 816715 874000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil ws-butler-chg delete)) . 842) (#("}" 0 1 (fontified t ws-butler-chg delete)) . 842)) nil (26126 47875 816704 96000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -838) (undo-tree-id1346 . -1) (#("s" 0 1 (fontified t)) . -839) (undo-tree-id1347 . -1) (#("v" 0 1 (fontified t)) . -840) (undo-tree-id1348 . -1) (#("(" 0 1 (fontified t)) . -841) (undo-tree-id1349 . -1) 842) nil (26126 47875 816693 930000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t ws-butler-chg delete)) . 838)) nil (26126 47875 816669 671000) 0 nil])
([nil nil ((838 . 840)) nil (26126 47875 816663 708000) 0 nil])
([nil nil ((854 . 862) (806 . 820) (#("        " 0 8 (fontified nil)) . 806) (839 . 848)) nil (26126 47875 816656 356000) 0 nil])
([nil nil ((#("." 0 1 (fontified t ws-butler-chg chg)) . -859) (undo-tree-id1343 . -1) (#("b" 0 1 (fontified t ws-butler-chg chg)) . -860) (undo-tree-id1344 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -861) (undo-tree-id1345 . -1) 862) nil (26126 47875 816644 671000) 0 nil])
([nil nil ((859 . 870)) nil (26126 47875 816625 78000) 0 nil])
([nil nil ((871 . 878)) nil (26126 47875 816618 615000) 0 nil])
([nil nil ((#("." 0 1 (fontified t ws-butler-chg chg)) . -877) (undo-tree-id1342 . -1) 878) nil (26126 47875 816611 319000) 0 nil])
([nil nil ((877 . 882)) nil (26126 47875 816600 60000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 883)) nil (26126 47875 816593 430000) 0 nil])
([nil nil ((883 . 884)) nil (26126 47875 816587 264000) 0 nil])
([nil nil ((833 . 837)) nil (26126 47875 816581 264000) 0 nil])
([nil nil ((#("const newData = " 0 5 (ws-butler-chg chg fontified t face font-lock-keyword-face) 5 6 (ws-butler-chg chg fontified t) 6 13 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 13 16 (ws-butler-chg chg fontified t)) . -789) (undo-tree-id1340 . -16) (undo-tree-id1341 . -16) 805) nil (26126 47875 816573 560000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . -780) (undo-tree-id1339 . -1) 781) nil (26126 47875 816558 338000) 0 nil])
([nil nil ((#("      " 0 6 (ws-butler-chg chg fontified t)) . -797)) nil (26126 47875 816546 616000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg delete fontified t)) . -780) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -781) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -782) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -783) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -784) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -785) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -786) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -787) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) 788) nil (26126 47875 816533 412000) 0 nil])
([nil nil ((#("const csv = (data) => {
    return ([new Date(), data].join(,))
};" 0 5 (fontified t ws-butler-chg chg face font-lock-keyword-face) 5 6 (fontified t ws-butler-chg delete) 6 9 (fontified t face font-lock-variable-name-face) 9 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t ws-butler-chg chg) 24 28 (fontified t ws-butler-chg chg) 28 34 (fontified t ws-butler-chg chg face font-lock-keyword-face) 34 37 (fontified t ws-butler-chg chg) 37 40 (fontified t ws-butler-chg chg face font-lock-keyword-face) 40 41 (fontified t ws-butler-chg chg) 41 45 (fontified t ws-butler-chg chg face font-lock-type-face) 45 53 (fontified t ws-butler-chg chg) 53 63 (fontified t ws-butler-chg chg) 63 64 (ws-butler-chg delete fontified t) 64 65 (fontified t) 65 66 (fontified t)) . -417) (undo-tree-id1314 . -63) (undo-tree-id1315 . -63) (undo-tree-id1316 . -63) (undo-tree-id1317 . -63) (undo-tree-id1318 . -63) (undo-tree-id1319 . -63) (undo-tree-id1320 . -66) (undo-tree-id1321 . -63) (undo-tree-id1322 . -66) 483) nil (26126 47875 816465 301000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -416) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) 417) nil (26126 47875 816273 784000) 0 nil])
([nil nil ((801 . 810) (t 26126 47875 863395 308000)) nil (26126 47956 594408 750000) 0 nil])
([nil nil ((810 . 819)) nil (26126 47956 594401 787000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t ws-butler-chg chg)) . -814) (undo-tree-id1527 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -815) (undo-tree-id1528 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -816) (undo-tree-id1529 . -1) (#("d" 0 1 (fontified t ws-butler-chg chg)) . -817) (undo-tree-id1530 . -1) (#("(" 0 1 (fontified t ws-butler-chg chg)) . -818) (undo-tree-id1531 . -1) 819) nil (26126 47956 594391 361000) 0 nil])
([nil nil ((814 . 831)) nil (26126 47956 594362 805000) 0 nil])
([nil nil ((831 . 836)) nil (26126 47956 594356 435000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -833) (undo-tree-id1524 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -834) (undo-tree-id1525 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -835) (undo-tree-id1526 . -1) 836) nil (26126 47956 594347 806000) 0 nil])
([nil nil ((833 . 834)) nil (26126 47956 594324 509000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -833) (undo-tree-id1523 . -1) 834) nil (26126 47956 594317 176000) 0 nil])
([nil nil ((833 . 838)) nil (26126 47956 594305 824000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -836) (undo-tree-id1521 . -1) (#("!" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -837) (undo-tree-id1522 . -1) 838) nil (26126 47956 594297 861000) 0 nil])
([nil nil ((836 . 857)) nil (26126 47956 594282 102000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -851) (undo-tree-id1515 . -1) (#("d" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -852) (undo-tree-id1516 . -1) (#("f" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -853) (undo-tree-id1517 . -1) (#("u" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -854) (undo-tree-id1518 . -1) (#("l" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -855) (undo-tree-id1519 . -1) (#("l" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -856) (undo-tree-id1520 . -1) 857) nil (26126 47956 594271 102000) 0 nil])
([nil nil ((851 . 859)) nil (26126 47956 594239 28000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -858) (undo-tree-id1514 . -1) 859) nil (26126 47956 594231 695000) 0 nil])
([nil nil ((858 . 859)) nil (26126 47956 594212 677000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -858) (undo-tree-id1513 . -1) 859) nil (26126 47956 594191 473000) 0 nil])
([nil nil ((858 . 860)) nil (26126 47956 594177 751000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -859) (undo-tree-id1512 . -1) 860) nil (26126 47956 594170 306000) 0 nil])
([nil nil ((859 . 861)) nil (26126 47956 594158 288000) 0 nil])
([nil nil ((861 . 878)) nil (26126 47956 594152 399000) 0 nil])
([nil nil ((992 . 1001)) nil (26126 47956 594146 214000) 0 nil])
([nil nil ((1001 . 1022)) nil (26126 47956 594140 103000) 0 nil])
([nil nil ((1022 . 1023)) nil (26126 47956 594133 899000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1022) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) 1023) nil (26126 47956 594125 862000) 0 nil])
([nil nil ((1022 . 1029)) nil (26126 47956 594111 233000) 0 nil])
([nil nil ((1029 . 1037)) nil (26126 47956 594105 251000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1023) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1024) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1025) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1026) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1027) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1028) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1029) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (#("c" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1030) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (#("c" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1031) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (#("u" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1032) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1033) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1034) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1035) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (#("d" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1036) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) 1037) nil (26126 47956 594084 66000) 0 nil])
([nil nil ((1023 . 1044)) nil (26126 47956 593929 159000) 0 nil])
([nil nil ((1044 . 1058)) nil (26126 47956 593922 548000) 0 nil])
([nil nil ((1058 . 1061)) nil (26126 48047 352000 851000) 0 nil])
([nil nil ((810 . 812)) nil (26126 48051 13937 877000) 0 nil] [nil nil ((#("res.status(200).send(\"Vote recorded successfully: \", req.body.vote);" 0 21 (fontified t) 21 51 (fontified t face font-lock-string-face) 51 68 (fontified t)) . -810) (undo-tree-id1539 . -68) (undo-tree-id1541 . -68) 878 (t 26126 47956 642995 85000)) ((810 . 878)) (26126 48046 701947 602000) 0 nil])
([nil nil ((1003 . 1005)) nil (26126 48053 492070 473000) 0 nil] [nil nil ((812 . 821)) ((#("
        " 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face) 1 9 (ws-butler-chg chg fontified t)) . 812) (undo-tree-id1563 . -9) (undo-tree-id1564 . -1)) (26126 48050 644970 613000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . 802) (undo-tree-id1532 . -8) (undo-tree-id1533 . -8) (undo-tree-id1535 . -8) (undo-tree-id1537 . -8) 810) ((802 . 810) (t 26126 48041 878578 159000)) (26126 48046 123995 170000) 0 nil])
([nil nil ((787 . 797) (t 26126 48053 538521 507000)) nil (26126 48122 720224 883000) 0 nil])
([nil nil ((814 . 822) (#("        " 0 8 (ws-butler-chg chg fontified nil face font-lock-comment-delimiter-face)) . 813) (813 . 821) (813 . 814) (#("        " 0 8 (ws-butler-chg chg fontified nil face font-lock-comment-delimiter-face)) . 813) (undo-tree-id1548 . -8) 821) ((813 . 821) (#("
" 0 1 (fontified nil)) . 813) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (#("        " 0 8 (ws-butler-chg chg fontified nil face font-lock-comment-delimiter-face)) . 813) (undo-tree-id1561 . -8) (nil ws-butler-chg delete 821 . 822) (813 . 821) (#("        " 0 8 (ws-butler-chg chg fontified t)) . 814) (undo-tree-id1562 . -8)) (26126 48050 303809 215000) 0 nil])
([nil nil ((802 . 810) 810 (t 26126 48041 878578 159000)) ((#("        " 0 8 (fontified t ws-butler-chg chg)) . 802) (t 26126 48041 878578 159000)) (26126 48045 786213 830000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 820) (t 26126 48122 770186 827000)) nil (26126 48192 201656 701000) 0 nil])
([nil nil ((815 . 823) (#("        " 0 8 (ws-butler-chg chg fontified nil)) . 814) (814 . 822) (814 . 815) (#("        " 0 8 (ws-butler-chg chg fontified t)) . 814) (undo-tree-id1546 . -8) (undo-tree-id1547 . -8) 822) ((814 . 822) (#("
" 0 1 (fontified nil)) . 814) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (#("        " 0 8 (ws-butler-chg chg fontified nil)) . 814) (undo-tree-id1557 . -8) (nil ws-butler-chg delete 822 . 823) (814 . 822) (#("        " 0 8 (ws-butler-chg chg fontified t)) . 815) (undo-tree-id1558 . -8)) (26126 48049 910867 49000) 0 nil])
([nil nil ((#("res.status(500).send(\"Error occurred while recording vote\");" 0 21 (fontified t) 21 58 (fontified t face font-lock-string-face) 58 60 (fontified t)) . 933) (undo-tree-id1542 . -60) (undo-tree-id1543 . -60) 993 (t 26126 48041 878578 159000)) ((nil ws-butler-chg delete 993 . 994) (933 . 993)) (26126 48045 785308 445000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t ws-butler-chg delete syntax-table (7 . 47) face font-lock-string-face)) . 820)) nil (26126 48193 29443 467000) 0 nil])
([nil nil ((816 . 824) (#("        " 0 8 (ws-butler-chg chg fontified nil)) . 815) (815 . 823) (815 . 816) (#("        " 0 8 (ws-butler-chg chg fontified t)) . 815) (undo-tree-id1544 . -8) (undo-tree-id1545 . -8) 823) ((nil ws-butler-chg delete 823 . 824) (815 . 823) (#("
" 0 1 (fontified nil)) . 815) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (#("        " 0 8 (ws-butler-chg chg fontified nil)) . 815) (undo-tree-id1552 . -8) (nil ws-butler-chg delete 823 . 824) (815 . 823) (#("        " 0 8 (ws-butler-chg chg fontified t)) . 816) (undo-tree-id1553 . -8) (undo-tree-id1554 . -8)) (26126 48049 910127 331000) 0 nil])
nil
([nil nil ((#("/" 0 1 (fontified t ws-butler-chg delete syntax-table (7 . 47) face font-lock-string-face)) . 1011) (#("/" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 1011)) nil (26126 48196 740808 533000) 0 nil] [nil nil ((813 . 821) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . 812) (812 . 820) (812 . 813) (#("        " 0 8 (fontified t)) . 812) (undo-tree-id1567 . -8) (undo-tree-id1568 . -8) (undo-tree-id1569 . -8) (undo-tree-id1570 . -8) 820) ((812 . 820) (#("
" 0 1 (fontified nil)) . 812) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . 812) (undo-tree-id1579 . -8) (nil ws-butler-chg delete 820 . 821) (812 . 820) (#("        " 0 8 (fontified t ws-butler-chg chg)) . 813) (undo-tree-id1580 . -8)) (26126 48192 202323 957000) 0 nil])
nil
([nil nil ((#("s" 0 1 (fontified t)) . -822) (undo-tree-id1592 . -1) (#("." 0 1 (fontified t)) . -823) (undo-tree-id1593 . -1) (#("s" 0 1 (fontified t)) . -824) (undo-tree-id1594 . -1) (#("t" 0 1 (fontified t)) . -825) (undo-tree-id1595 . -1) (#("a" 0 1 (fontified t)) . -826) (undo-tree-id1596 . -1) (#("t" 0 1 (fontified t)) . -827) (undo-tree-id1597 . -1) (#("u" 0 1 (fontified t)) . -828) (undo-tree-id1598 . -1) (#("s" 0 1 (fontified t)) . -829) (undo-tree-id1599 . -1) (#("(" 0 1 (fontified t)) . -830) (undo-tree-id1600 . -1) (#("2" 0 1 (fontified t)) . -831) (undo-tree-id1601 . -1) (#("0" 0 1 (fontified t)) . -832) (undo-tree-id1602 . -1) (#("0" 0 1 (fontified t)) . -833) (undo-tree-id1603 . -1) (#(")" 0 1 (fontified t)) . -834) (undo-tree-id1604 . -1) 835 (t 26126 48196 785831 929000)) nil (26126 48243 126384 27000) 0 nil])
([nil nil ((814 . 822) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . 813) (813 . 821) (813 . 814) (#("        " 0 8 (fontified t ws-butler-chg chg)) . 813) (undo-tree-id1565 . -8) (undo-tree-id1566 . -8) 821) ((nil ws-butler-chg delete 821 . 822) (813 . 821) (#("
" 0 1 (fontified nil)) . 813) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . 813) (undo-tree-id1574 . -8) (nil ws-butler-chg delete 821 . 822) (813 . 821) (#("        " 0 8 (fontified t ws-butler-chg chg)) . 814) (undo-tree-id1575 . -8) (undo-tree-id1576 . -8)) (26126 48192 201448 868000) 0 nil])
([nil nil ((822 . 823)) nil (26126 48243 126322 527000) 0 nil])
nil
([nil nil ((829 . 834)) nil (26126 48243 126316 564000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1008) (undo-tree-id1582 . -1) (#("t" 0 1 (fontified t)) . -1009) (undo-tree-id1583 . -1) (#("a" 0 1 (fontified t)) . -1010) (undo-tree-id1584 . -1) (#("t" 0 1 (fontified t)) . -1011) (undo-tree-id1585 . -1) (#("u" 0 1 (fontified t)) . -1012) (undo-tree-id1586 . -1) (#("s" 0 1 (fontified t)) . -1013) (undo-tree-id1587 . -1) (#("(" 0 1 (fontified t)) . -1014) (undo-tree-id1588 . -1) (#("5" 0 1 (fontified t)) . -1015) (undo-tree-id1589 . -1) (#("0" 0 1 (fontified t)) . -1016) (undo-tree-id1590 . -1) (#("0" 0 1 (fontified t)) . -1017) (undo-tree-id1591 . -1) 1018) nil (26126 48243 126302 397000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t ws-butler-chg delete)) . 1008)) nil (26126 48243 126251 712000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1007) (undo-tree-id1581 . -1) 1008) nil (26126 48243 126242 398000) 0 nil])
([nil current ((1013 . 1018)) nil (26126 48243 126196 472000) 0 nil])
nil
